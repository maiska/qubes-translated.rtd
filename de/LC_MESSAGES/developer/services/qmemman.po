# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# erinm, 2022
# Lars Kl, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-23 17:07+0200\n"
"PO-Revision-Date: 2022-05-23 15:12+0000\n"
"Last-Translator: Lars Kl, 2022\n"
"Language-Team: German (https://www.transifex.com/otf/teams/56717/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../../_doc/developer/services/qmemman.rst:2
#: e4430294a1cd4b4c9c128b975a41f72b
msgid "Rationale"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:4
#: 529c23f64902407390d335f99e4cf44f
msgid ""
"Traditionally, Xen VMs are assigned a fixed amount of memory. It is not the "
"optimal solution, as some VMs may require more memory than assigned "
"initially, while others underutilize memory. Thus, there is a need for "
"solution capable of shifting free memory from VM to another VM."
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:9
#: 6d13d0db77c94c9ca39f6ab53e54aaad
msgid ""
"The `tmem <https://oss.oracle.com/projects/tmem/>`__ project provides a "
"“pseudo-RAM” that is assigned on per-need basis. However this solution has "
"some disadvantages:"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:13
#: c245e779c79e404aa1889c107122676f
msgid ""
"It does not provide real RAM, just an interface to copy memory to/from fast,"
" RAM-based storage. It is perfect for swap, good for file cache, but not "
"ideal for many tasks."
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:16
#: a79ec4257da247618c965d59b9954175
msgid ""
"It is deeply integrated with the Linux kernel. When Qubes will support "
"Windows guests natively, we would have to port *tmem* to Windows, which may "
"be challenging."
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:20
#: 05aa34e8f8cf491c8e1641590243a74b
msgid ""
"Therefore, in Qubes another solution is used. There is the *qmemman* dom0 "
"daemon. All VMs report their memory usage (via xenstore) to *qmemman*, and "
"it makes decisions on whether to balance memory across domains. The actual "
"mechanism to add/remove memory from a domain (*xc.domain_set_target_mem*) is"
" already supported by both PV Linux guests and Windows guests (the latter "
"via PV drivers)."
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:27
#: 794a9b75b36745b88d6d15e90e2e571d
msgid ""
"Similarly, when there is need for Xen free memory (for instance, in order to"
" create a new VM), traditionally the memory is obtained from dom0 only. When"
" *qmemman* is running, it offers an interface to obtain memory from all "
"domains."
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:32
#: 404fe01c49ed47dda4f1573686c606d1
msgid "To sum up, *qmemman* pros and cons. Pros:"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:34
#: 0f15f25c27a54cfbba9cc083ffe80496
msgid ""
"provides automatic balancing of memory across participating PV and HVM "
"domains, based on their memory demand"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:36
#: f5efb151743943c4b28a3b951c4eb08f
msgid ""
"works well in practice, with less than 1% CPU consumption in the idle case"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:38
#: 095e30d05f0e4cb093a01e124b7f8cf1
msgid "simple, concise implementation"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:40
#: 8f30a96ad7394cd29e8e9187729b67bf
msgid "Cons:"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:42
#: c15caa0729894d5ab0c1a50bfa644714
msgid ""
"the algorithm to calculate the memory requirement for a domain is "
"necessarily simple, and may not closely reflect reality"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:44
#: 4122e43c61724076aec74abb141e6e2e
msgid ""
"*qmemman* is notified by a VM about memory usage change not more often than "
"10 times per second (to limit CPU overhead in VM). Thus, there can be up to "
"0.1s delay until qmemman starts to react to the new memory requirements"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:48
#: 900263be1c4a4ba9a7b34857047e09ce
msgid ""
"it takes more time to obtain free Xen memory, as all participating domains "
"need to instructed to yield memory"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:52
#: 76a3f02db75a4db7b261f052a11caeb3
msgid "Interface"
msgstr "Oberfläche"

#: ../../../_doc/developer/services/qmemman.rst:54
#: 862e6c8657494982ae0d1e40636c0244
msgid "*qmemman* listens for the following events:"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:56
#: a8fa0adc76104b77a820641e6d5366fc
msgid ""
"writes to ``/local/domain/domid/memory/meminfo`` xenstore keys by *meminfo-"
"writer* process in VM. The content of this key is taken from the VM’s "
"``/proc/meminfo`` pseudofile ; *meminfo-writer* just strips some unused "
"lines from it. Note that *meminfo-writer* writes its xenstore key only if "
"the VM memory usage has changed significantly enough since the last update "
"(by default 30MB), to prevent flooding with almost identical data"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:63
#: eca5e36725a34aec9820b3a90df7671f
msgid ""
"commands issued over Unix socket ``/var/run/qubes/qmemman.sock``. Currently,"
" the only command recognized is to free the specified amount of memory. The "
"QMemmanClient class implements the protocol."
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:66
#: 7ce28b3c8d5949568e982cd22c5ad26c
msgid ""
"if the ``/var/run/qubes/do-not-membalance`` file exists, *qmemman* suspends "
"memory balancing. It is primarily used when allocating memory for a to-be-"
"created domain, to prevent using up the free Xen memory by the balancing "
"algorithm before the domain creation is completed."
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:73
#: 61a9c36ef0ab468a86f3ebc21f8a0063
msgid "Algorithms basics"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:75
#: 06439825c6b54275a9e5a20db3a2eb62
msgid ""
"The core VM property is ``prefmem``. It denotes the amount of memory that "
"should be enough for a domain to run efficiently in the nearest future. All "
"*qmemman* algorithms will never shrink domain memory below ``prefmem``. "
"Currently, ``prefmem`` is simply 130% of current memory usage in a domain "
"(without buffers and cache, but including swap). Naturally, ``prefmem`` is "
"calculated by *qmemman* based on the information passed by *meminfo-writer*."
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:83
#: cb55afb184e74e83887ca681b612c580
msgid ""
"Whenever *meminfo-writer* running in domain A provides new data on memory "
"usage to *qmemman*, the ``prefmem`` value for A is updated and the following"
" balance algorithm (*qmemman_algo.balance*) is triggered. Its output is the "
"list of (domain_id, new_memory_target_to_be_set) pairs:"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:89
#: 24e4c2881f1b41aa986bed80a44f4fac
msgid "TOTAL_PREFMEM = sum of ``prefmem`` of all participating domains"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:90
#: 31054a96845248269180f4b7b5d1cc39
msgid ""
"TOTAL_MEMORY = sum of all memory assigned to participating domains plus Xen "
"free memory"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:92
#: 3761fe7ceb8746e58b358845fb89ad33
msgid ""
"if TOTAL_MEMORY > TOTAL_PREFMEM, then redistribute TOTAL_MEMORY across all "
"domains proportionally to their ``prefmem``"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:94
#: 42f157b53a904b318477dfe7f1284d16
msgid "if TOTAL_MEMORY < TOTAL_PREFMEM, then"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:96
#: 2facc967cadc46d1a00767b224f03eee
msgid ""
"for all domains whose ``prefmem`` is less than actual memory, shrink them to"
" their ``prefmem``"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:98
#: cc274075caa4431591bc6de348fefea1
msgid ""
"redistribute memory reclaimed in the previous step between the rest of "
"domains, proportionally to their ``prefmem``"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:101
#: db557c38e83d4844ace2f8cad548b3c8
msgid ""
"In order to avoid too frequent memory redistribution, it is actually "
"executed only if one of the below conditions hold:"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:104
#: 019a24b1b3e94bb4aff8798137eb108e
msgid ""
"the sum of memory size changes for all domains is more than "
"MIN_TOTAL_MEMORY_TRANSFER (150MB)"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:106
#: fc220edc7bbd46df9e1123734cdf957e
msgid ""
"one of the domains is below its ``prefmem``, and more than "
"MIN_MEM_CHANGE_WHEN_UNDER_PREF (15MB) would be added to it"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:109
#: 2e5daf3b2f4c4dd68f48ef0fdd522213
msgid ""
"Additionally, the balance algorithm is tuned so that XEN_FREE_MEM_LEFT "
"(50MB) is always left as Xen free memory, to make coherent memory "
"allocations in driver domains work."
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:113
#: 575ad62bfb42424e863396626e30d098
msgid ""
"Whenever *qmemman* is asked to return X megabytes of memory to Xen free "
"pool, the following algorithm (*qmemman_algo.balloon*) is executed:"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:116
#: 59cf73f0db9a4023a7eb8a85d234831d
msgid ""
"find all domains (“donors”) whose actual memory is greater than its "
"``prefmem``"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:118
#: 94bc3ec8ee0f4d6db1d5ab9ef60f949f
msgid ""
"calculate how much memory can be reclaimed by shrinking donors to their "
"``prefmem``. If it is less than X, return error."
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:120
#: 8761879015e8416aa9ec9fcd3b4d77f8
msgid ""
"shrink donors, proportionally to their ``prefmem``, so that X MB should "
"become free"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:122
#: 06cb1ccbfe064b979c4d1740441b3872
msgid "wait BALOON_DELAY (0.1s)"
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:123
#: b670d2e8b901487399a79712da163c56
msgid ""
"if some domain have not given back any memory, remove it from the donors "
"list, and go to step 2, unless we already did MAX_TRIES (20) iterations "
"(then return error)."
msgstr ""

#: ../../../_doc/developer/services/qmemman.rst:128
#: 79a13ce4980b4998b6bc0ba6eaa3e9f3
msgid "Notes"
msgstr "Notizen"

#: ../../../_doc/developer/services/qmemman.rst:130
#: 055b26483665441fab3bb8b9fe2c59c8
msgid ""
"Conventional means of viewing the memory available to Qubes will give "
"incorrect values for ``dom0`` since commands such as ``free`` will only show"
" the memory allocated for ``dom0``. Run the ``xl info`` command in ``dom0`` "
"and read the ``total_memory`` field to see the total memory available to "
"Qubes."
msgstr ""
