# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-23 17:07+0200\n"
"PO-Revision-Date: 2022-05-23 15:12+0000\n"
"Language-Team: German (https://www.transifex.com/otf/teams/56717/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../../_doc/developer/system/template-implementation.rst:1
#: 28180fd6495743f5a38d702d71806ead
msgid "Every VM has 4 block devices connected:"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:3
#: 01131493d1bb4527b36d145c06507505
msgid "**xvda** – base root device (/) – details described below"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:4
#: 7224b90933a4427c9060773cce50abc3
msgid "**xvdb** – private.img – place where VM always can write."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:5
#: 36c84989f2ae4460a07d57705eb125d0
msgid ""
"**xvdc** – volatile.img, discarded at each VM restart – here is placed swap "
"and temporal “/” modifications (see below)"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:7
#: 6d5fdc87d94841edad8f5aff8d2ee2f8
msgid "**xvdd** – modules.img – kernel modules and firmware"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:10
#: 7bb282f09af1421da9a49b7d0f73b2ff
msgid "private.img (xvdb)"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:12
#: 80f856023d074826850a772de2aeb567
msgid ""
"This is mounted as /rw and here is placed all VM private data. This "
"includes:"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:15
#: c5b763939f764392a8cedf89d6d8330f
msgid "*/home* – which is bind mounted to /rw/home"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:16
#: 4476772b1ffc470cb62916fd96acf6b5
msgid "*/usr/local* – which is symlink to /rw/usrlocal"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:17
#: 72662ad6f9a34912a0cbe8c11cc81175
msgid ""
"some config files (/rw/config) called by qubes core scripts (ex "
"/rw/config/rc.local)"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:20
#: 2063d7b3b4bb40ce8aa01a3a0c6b4f97
msgid ""
"**Note:** Whenever a TemplateBasedVM is created, the contents of the "
"``/home`` directory of its parent TemplateVM are *not* copied to the child "
"TemplateBasedVM’s ``/home``. The child TemplateBasedVM’s ``/home`` is "
"independent from its parent TemplateVM’s ``/home``, which means that any "
"changes to the parent TemplateVM’s ``/home`` will not affect the child "
"TemplateBasedVM’s ``/home``. Once a TemplateBasedVM has been created, any "
"changes in its ``/home``, ``/usr/local``, or ``/rw/config`` directories will"
" be persistent across reboots, which means that any files stored there will "
"still be available after restarting the TemplateBasedVM. No changes in any "
"other directories in TemplateBasedVMs persist in this manner. If you would "
"like to make changes in other directories which *do* persist in this manner,"
" you must make those changes in the parent TemplateVM."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:35
#: 404b8c983b9242a2bbb820d76dc41798
msgid "modules.img (xvdd)"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:37
#: 21fbcf6dbaf54e10831e326a4bedc1f0
msgid ""
"As the kernel is chosen in dom0, there must be some way to provide matching "
"kernel modules to VM. Qubes kernel directory consists of 3 files:"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:41
#: 1040e28209a7489283d83c91cb72062c
msgid "*vmlinuz* – actual kernel"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:42
#: 7eb87124140f4a0d8a69c73ad5de4b51
msgid ""
"*initramfs* – initial ramdisk containing script to setup snapshot devices "
"(see below) and mount /lib/modules"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:44
#: d0e73f3f28274496a7d309768b7f0f90
msgid ""
"*modules.img* – filesystem image of /lib/modules with matching kernel "
"modules and firmware (/lib/firmware/updates is symlinked to "
"/lib/modules/firmware)"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:48
#: 1f578b72fa8448309cf812533c77a2b7
msgid ""
"Normally kernel “package” is common for many VMs (can be set using qvm-"
"prefs). One of them can be set as default (qvm-set-default-kernel) to "
"simplify kernel updates (by default all VMs use the default kernel). All "
"installed kernels are placed in /var/lib/qubes/vm-kernels as separate "
"subdirs. In this case, modules.img is attached to the VM as R/O device."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:55
#: d83f25198b7c4958b0a4510a2735c4ee
msgid ""
"There is a special case when the VM can have a custom kernel – when it is "
"updateable (StandaloneVM or TemplateVM) and the kernel is set to “none” (by "
"qvm-prefs). In this case the VM uses the kernel from the “kernels” VM subdir"
" and modules.img is attached as R/W device. FIXME: “none” should be renamed "
"to “custom”."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:62
#: b62ad04504db493fa8175bad4058b0e5
msgid "Qubes TemplateVM implementation"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:64
#: 25804e11138141bdb44ab9946811f36c
msgid ""
"TemplateVM has a shared root.img across all AppVMs that are based on it. "
"This mechanism has some advantages over a simple common device connected to "
"multiple VMs:"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:68
#: 780f2466e0564b3eada6a9e2d3ea1ccc
msgid ""
"root.img can be modified while there are AppVMs running – without corrupting"
" the filesystem"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:70
#: 95acc50e45174eba8ad10721a4412882
msgid ""
"multiple AppVMs that are using different versions of root.img (from various "
"points in time) can be running concurrently"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:73
#: 9eaa3a41c69a4308a57ba540d284a466
msgid ""
"There are two layers of the device-mapper snapshot device; the first one "
"enables modifying root.img without stopping the AppVMs and the second one, "
"which is contained in the AppVM, enables temporal modifications to its "
"filesystem. These modifications will be discarded after a restart of the "
"AppVM."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:82
#: ../../../_doc/developer/system/template-implementation.rst:82
#: 8c133a61de64428e8acd307f1684585e 06f2f0f6307b4e0b9063bbed918b97a3
msgid "TemplateSharing2.png"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:85
#: b312f0b50c5c4521bffdfa383af592be
msgid "Snapshot device in Dom0"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:87
#: edb6987f62b64cc4ad652da37e7f1714
msgid "This device consists of:"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:89
#: c9f0dbf527274c5bbaead371c2801dc3
msgid "root.img – real template filesystem"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:90
#: ed6b3aa78b5840ae9b322f25a3613095
msgid ""
"root-cow.img – differences between the device as seen by AppVM and the "
"current root.img"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:93
#: 852189bc22c440979d177c34ab72748d
msgid ""
"The above is achieved through creating device-mapper snapshots for each "
"version of root.img. When an AppVM is started, a xen hotplug script "
"(/etc/xen/scripts/block-snapshot) reads the inode numbers of root.img and "
"root-cow.img; these numbers are used as the snapshot device’s name. When a "
"device with the same name exists the new AppVM will use it – therefore, "
"AppVMs based on the same version of root.img will use the same device. Of "
"course, the device-mapper cannot use the files directly – it must be "
"connected through /dev/loop*. The same mechanism detects if there is a loop "
"device associated with a file determined by the device and inode numbers – "
"or if creating a new loop device is necessary."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:104
#: 89cba52a89854dffbad5cad550ea8023
msgid ""
"When an AppVM is stopped the xen hotplug script checks whether the device is"
" still in use – if it is not, the script removes the snapshot and frees the "
"loop device."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:111
#: 5bab069a9bb44460bee5735c31bcdf74
msgid ""
"In order for the full potential of the snapshot device to be realized, every"
" change in root.img must save the original version of the modified block in "
"root-cow.img. This is achieved by a snapshot-origin device."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:115
#: 353b19dceb944f9cb8ae6424b7f87077
msgid ""
"When TemplateVM is started, it receives the snapshot-origin device connected"
" as a root device (in read-write mode). Therefore, every change to this "
"device is immediately saved in root.img – but remains invisible to the "
"AppVM, which uses the snapshot."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:120
#: dec41009f96c4902989fcc778f04c517
msgid ""
"When TemplateVM is stopped, the xen script moves root-cow.img to root-"
"cow.img.old and creates a new one (using the ``qvm-template-commit`` tool). "
"The snapshot device will remain untouched due to the loop device, which uses"
" an actual file on the disk (by inode, not by name). Linux kernel frees the "
"old root-cow.img files as soon as they are unused by all snapshot devices "
"(to be exact, loop devices). The new root-cow.img file will get a new inode "
"number, and so new AppVMs will get new snapshot devices (with different "
"names)."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:132
#: cd5742af0f84470481d0c4a0a70a9222
msgid ""
"There is possibility to rollback last template changes. Saved root-"
"cow.img.old contains all changes made during last TemplateVM run. Rolling "
"back changes is done by reverting this “binary patch”."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:136
#: 0240a504de7b47fdbf815d7f7c1ae430
msgid ""
"This is done using snapshot-merge device-mapper target (available from "
"2.6.34 kernel). It requires that no other snapshot device uses underlying "
"block devices (root.img, root-cow.img via loop device). Because of this all "
"AppVMs based on this template must be halted during this operation."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:142
#: ad16163c29154f18bf6d5ca3db0d848e
msgid "Steps performed by **qvm-revert-template-changes**:"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:144
#: 072344fc65af4467815e7136b2b21d0d
msgid "Ensure that no other VMs uses this template."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:145
#: f08adfbd7e0e4640bfe8fa033be5be31
msgid ""
"Prepare snapshot device with **root-cow.img.old** instead of *root-cow.img* "
"(*/etc/xen/scripts/block-snapshot prepare*)."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:147
#: 04ec5fb6a82a4751833c37f058b3b606
msgid ""
"Replace *snapshot* device-mapper target with *snapshot-merge*, other "
"parameters (chunk size etc) remains untouched. Now kernel starts merging "
"changes stored in *root-cow.img.old* into *root.img*. d-m device can be used"
" normally (if needed)."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:151
#: 6da8c1e3dd0b4317b951fc6c5e85081c
msgid ""
"Waits for merge completed: *dmsetup status* shows used snapshot blocks – it "
"should be equal to metadata size when completed."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:153
#: 82283ddcd47845678bd0ae27005985ee
msgid "Replace *snapshot-merge* d-m target back to *snapshot*."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:154
#: 1914aebfc5bf45f18a1f2b417d495425
msgid "Cleanup snapshot device (if nobody uses it at the moment)."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:155
#: 7c3be3159fd4422a939af2fa8e3a0be1
msgid "Move *root-cow.img.old* to *root-cow.img* (overriding existing file)."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:158
#: 628d5d9dcfa642499e61f0f4a6d5a151
msgid "Snapshot device in AppVM"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:160
#: eff2d7b6cb06478a97b2ec603a0bf1d9
msgid ""
"Root device is exposed to AppVM in read-only mode. AppVM can write only in:"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:163
#: 52ee351ec72442b5b5b2fd0579ab012b
msgid ""
"private.img – persistent storage (mounted in /rw) used for /home, /usr/local"
" – in future versions, its use may be extended"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:165
#: 2df2161e4a714ad28c92664ef7cfd6a3
msgid ""
"volatile.img – temporary storage, which is discarded after an AppVM restart"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:168
#: 52a5e0a278bc4df5978ac3f7f4aaa448
msgid "volatile.img is divided into two partitions:"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:170
#: 30d0294336a1418eaff63280ec90d9ad
msgid "changes to root device"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:171
#: 6c8e66915e304882975896c0ed0c9341
msgid "swap partition"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:173
#: d1ddd2606d5d43f68d0fcf220fbc6179
msgid ""
"Inside of an AppVM, the root device is wrapped by the snapshot in the first "
"partition of volatile.img. Therefore, the AppVM can write anything to its "
"filesystem – however, such changes will be discarded after a restart."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:179
#: 5f4504e08072412085857a9464f0f0c5
msgid "StandaloneVM"
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:181
#: 6d906f404d3d4793b34439d20531ec7e
msgid ""
"Standalone VM enables user to modify root filesystem persistently. It can be"
" created using *–standalone* switch to *qvm-create*."
msgstr ""

#: ../../../_doc/developer/system/template-implementation.rst:184
#: 3fef24e023e6425f8fe493b299173b44
msgid ""
"It is implemented just like TemplateVM (has own root.img connected as R/W "
"device), but no other VMs can be based on it."
msgstr ""
