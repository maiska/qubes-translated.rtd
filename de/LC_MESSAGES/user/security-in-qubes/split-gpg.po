# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Lars Schimmer <echelon@i2pmail.org>, 2022
# Naut tilus <trmct@posteo.sg>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-23 17:07+0200\n"
"PO-Revision-Date: 2022-05-23 15:08+0000\n"
"Last-Translator: Naut tilus <trmct@posteo.sg>, 2022\n"
"Language-Team: German (https://www.transifex.com/otf/teams/56717/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:1
#: b11957d8d4384ce187523adfb9b14d04
msgid ""
"Split GPG implements a concept similar to having a smart card with your "
"private GPG keys, except that the role of the “smart card” is played by "
"another Qubes app qube. This way one not-so-trusted domain, e.g. the one "
"where Thunderbird is running, can delegate all crypto operations – such as "
"encryption/decryption and signing – to another, more trusted, network-"
"isolated domain. This way the compromise of your domain where Thunderbird or"
" another client app is running – arguably a not-so-unthinkable scenario – "
"does not allow the attacker to automatically also steal all your keys. (We "
"should make a rather obvious comment here that the so-often-used passphrases"
" on private keys are pretty meaningless because the attacker can easily set "
"up a simple backdoor which would wait until the user enters the passphrase "
"and steal the key then.)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:15
#: b7e92e1dc4624ae99f359cf83f75a69b
msgid "|split-gpg-diagram.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: 990e859505714117932c93dad1a704e1 3ad935e7ae3f438fa548d2710909758b
msgid "split-gpg-diagram.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:17
#: 8c70921d64164d2f9378a797bca4b172
msgid "This diagram presents an overview of the Split GPG architecture."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:20
#: 8d64460fe7bc415ca4574b632acdc6c2
msgid "Advantages of Split GPG vs. traditional GPG with a smart card"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:22
#: b15c858773d74a098a514001d739d686
msgid ""
"It is often thought that the use of smart cards for private key storage "
"guarantees ultimate safety. While this might be true (unless the attacker "
"can find a usually-very-expensive-and-requiring-physical-presence way to "
"extract the key from the smart card) but only with regards to the safety of "
"the private key itself. However, there is usually nothing that could stop "
"the attacker from requesting the smart card to perform decryption of all the"
" user documents the attacker has found or need to decrypt. In other words, "
"while protecting the user’s private key is an important task, we should not "
"forget that ultimately it is the user data that are to be protected and that"
" the smart card chip has no way of knowing the requests to decrypt documents"
" are now coming from the attacker’s script and not from the user sitting in "
"front of the monitor. (Similarly the smart card doesn’t make the process of "
"digitally signing a document or a transaction in any way more secure – the "
"user cannot know what the chip is really signing. Unfortunately this problem"
" of signing reliability is not solvable by Split GPG)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:40
#: e95e4bc5fe594b86a6a87e0fdf0066c7
msgid ""
"With Qubes Split GPG this problem is drastically minimized, because each "
"time the key is to be used the user is asked for consent (with a definable "
"time out, 5 minutes by default), plus is always notified each time the key "
"is used via a tray notification from the domain where GPG backend is "
"running. This way it would be easy to spot unexpected requests to decrypt "
"documents."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:47
#: 7c75a514a8594c3eb78fe0da69bcf919
msgid "|r2-split-gpg-1.png| |r2-split-gpg-3.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: 995e3e3df53a42ffa92d939a345aee5b 45800a2036164318bad61137ce516008
msgid "r2-split-gpg-1.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: 05b842882ccd4f4ba9616a464ab2d202 9b9c012e1dec461b9e82acf35e831216
msgid "r2-split-gpg-3.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:50
#: 78a8dcdb9fb0484097ed7e082dd2cb50
msgid "Configuring Split GPG"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:52
#: 6ca10c9966d64605a292ef00d3f7f326
msgid "In dom0, make sure the ``qubes-gpg-split-dom0`` package is installed."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:58
#: 8ec24cd1ff7841b1b94c4b0e5f7c1605
msgid ""
"Make sure you have the ``qubes-gpg-split`` package installed in the template"
" you will use for the GPG domain."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:61
#: 96c144bfec4049b0999982061350dc31
msgid "For Debian or Whonix:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:67
#: 1e1b5d504c8c4271826a99a7ca6622e4
msgid "For Fedora:"
msgstr "Für Fedora:"

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:74
#: 5d697129f71640dfa40fc4c7aa518c41
msgid "Setting up the GPG backend domain"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:76
#: ecb27e92bf2d416bb86f2453e034420f
msgid ""
"First, create a dedicated app qube for storing your keys (we will be calling"
" it the GPG backend domain). It is recommended that this domain be network "
"disconnected (set its netvm to ``none``) and only used for this one purpose."
" In later examples this app qube is named ``work-gpg``, but of course it "
"might have any other name."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:82
#: e571d8cba40e473994e725267abe69c4
msgid ""
"Make sure that gpg is installed there. At this stage you can add the private"
" keys you want to store there, or you can now set up Split GPG and add the "
"keys later. To check which private keys are in your GPG keyring, use:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:97
#: 1634b529ada04118ad7fd440bca655c8
msgid ""
"This is pretty much all that is required. However, you might want to modify "
"the default timeout: this tells the backend for how long the user’s approval"
" for key access should be valid. (The default is 5 minutes.) You can change "
"this via the ``QUBES_GPG_AUTOACCEPT`` environment variable. You can override"
" it e.g. in ``~/.profile``:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:107
#: 48c3752d83b2419e9f3f4f0bcd300f9b
msgid ""
"Please note that previously, this parameter was set in ~/.bash_profile. This"
" will no longer work. If you have the parameter set in ~/.bash_profile you "
"*must* update your configuration."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:111
#: 003d3c3d647e4983a2ae3ae5011bff8f
msgid ""
"Please be aware of the caveat regarding passphrase-protected keys in the "
"`Current limitations <#current-limitations>`__ section."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:115
#: ca092bd086354b85adf8fa99e4810afc
msgid "Configuring the client apps to use Split GPG backend"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:117
#: a9396931ef484a51bbf7761d3369996c
msgid ""
"Normally it should be enough to set the ``QUBES_GPG_DOMAIN`` to the GPG "
"backend domain name and use ``qubes-gpg-client`` in place of ``gpg``, e.g.:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:136
#: 28c348df8f2849268ce935a6dd71200f
msgid ""
"Note that running normal ``gpg -K`` in the demo above shows no private keys "
"stored in this app qube."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:139
#: 2da3fb9601044a67b9ae869981826d8b
msgid "A note on ``gpg`` and ``gpg2``:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:141
#: 7d697b0bd2ac4999bae5ae24268c8a7d
msgid ""
"Throughout this guide, we refer to ``gpg``, but note that Split GPG uses "
"``gpg2`` under the hood for compatibility with programs like Enigmail (which"
" now supports only ``gpg2``). If you encounter trouble while trying to set "
"up Split GPG, make sure you’re using ``gpg2`` for your configuration and "
"testing, since keyring data may differ between the two installations."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:149
#: 3c8a72966e2149aabc9925d715bfd95d
msgid "Advanced Configuration"
msgstr "Erweiterte Einstellungen"

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:151
#: b819a66eb3ce4f1ea335bb5dad2c12ed
msgid ""
"The ``qubes-gpg-client-wrapper`` script sets the ``QUBES_GPG_DOMAIN`` "
"variable automatically based on the content of the file ``/rw/config/gpg-"
"split-domain``, which should be set to the name of the GPG backend VM. This "
"file survives the app qube reboot, of course."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:161
#: 9341ee7fd8c34c6285bdd1695fdf2dfd
msgid ""
"Split GPG’s default qrexec policy requires the user to enter the name of the"
" app qube containing GPG keys on each invocation. To improve usability for "
"applications like Thunderbird with Enigmail, in ``dom0`` place the following"
" line at the top of the file ``/etc/qubes-rpc/policy/qubes.Gpg``:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:171
#: abf410e74a1c466d91c63a053fa6231f
msgid ""
"where ``work-email`` is the Thunderbird + Enigmail app qube and ``work-gpg``"
" contains your GPG keys."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:174
#: a35693a543fd466f9e8892c1572f90e1
msgid ""
"You may also edit the qrexec policy file for Split GPG in order to tell "
"Qubes your default gpg vm (qrexec prompts will appear with the gpg vm "
"preselected as the target, instead of the user needing to type a name in "
"manually). To do this, append ``,default_target=<vmname>`` to ``ask`` in "
"``/etc/qubes-rpc/policy/qubes.Gpg``. For the examples given on this page:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:185
#: c9edbb01cea54b03b8a355cb0436e80d
msgid ""
"Note that, because this makes it easier to accept Split GPG’s qrexec "
"authorization prompts, it may decrease security if the user is not careful "
"in reviewing presented prompts. This may also be inadvisable if there are "
"multiple app qubes with Split GPG set up."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:191
#: 9d097d92c7414a7794bb5af89de074ea
msgid "Using Thunderbird"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:194
#: 95dd9f2945aa4cf7bb233b9381f17fb7
msgid "Thunderbird 78 and higher"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:196
#: e7383f899ff642b88063c2f8f4d3d62f
msgid ""
"Starting with version 78, Thunderbird has a built-in PGP feature and no "
"longer requires the Enigmail extension. For users coming from the Enigmail "
"extension, the built-in functionality is more limited currently, including "
"that **public keys must live in your ``work-email`` qube with Thunderbird "
"rather than your offline ``work-gpg`` qube**."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:202
#: 7a6400f6e9524db797dda3e034069ec5
msgid ""
"In ``work-email``, use the Thunderbird config editor (found at the bottom of"
" preferences/options), and search for ``mail.openpgp.allow_external_gnupg``."
" Switch the value to true. Still in config editor, search for "
"``mail.openpgp.alternative_gpg_path``. Set its value to ``/usr/bin/qubes-"
"gpg-client-wrapper``. Restart Thunderbird after this change."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:209
#: c128191666f447a2a0f28dce6b355cc6
msgid "|tb78-1.png| |tb78-2.png| |tb78-3.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: d4492f2e9f29441d9d64417190c05db2 42abe52663c34cedadac0dc7b5574878
msgid "tb78-1.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: 0a15aaa25e8c4ceb9d04fec0ccbd5eca e22925cd436d4bb8a57cac636919e029
msgid "tb78-2.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: 7fc48b47e59f4b73be0438e45dac85c6 801af27a5ebe4124a22e964c75c4ee74
msgid "tb78-3.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:211
#: f524ae5941884a598e6d40f166f64d13
msgid ""
"You need to obtain your key ID which should be **exactly 16 characters**. "
"Enter the command ``qubes-gpg-client-wrapper -K --keyid-format long``:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:229
#: 0543d2a44b014a26b96e1a25e6036cd4
msgid ""
"Open the Account Settings and open the *End-to-End Encryption* tab of the "
"respective email account. Click the *Add Key* button. You’ll be offered the "
"choice *Use your external key through GnuPG*. Select it and click Continue."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:234
#: 60fde39e4ab14ae0af307f2ebb703e1c
msgid "|tb78-4.png| |tb78-5.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: 953f9b82c7ec4be38049410421b0ec8c e3854cf1830546f093e87859026caf65
msgid "tb78-4.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: 85ad3aaaf6cc459d8e62025caae9ca00 a8d910caf81a4c8b9c01d262b1112bca
msgid "tb78-5.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:236
#: 7e36c70ed0754bbc954a35a202481999
msgid ""
"The key ID reference you would need here is ``777402E6D301615C``. Now paste "
"or type the ID of the secret key that you would like to use. Be careful to "
"enter it correctly, because your input isn’t verified. Confirm to save this "
"key ID. Now you can select the key ID to use."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:241
#: 7edbd869b78c45529592c52421129aaf
msgid "|tb78-6.png| |tb78-7.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: b4c42c87916942b1a3858a2df2d5c499 45d65f22122044aa9590d786af3b97f1
msgid "tb78-6.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: b07e02a439da447d8dfac44da4d9b716 80dc3931f282483c8a411a3723e530e6
msgid "tb78-7.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:243
#: 181576406ff049fe85e2771c93dea1c2
msgid ""
"This key ID will be used to digitally sign or send an encrypted message with"
" your account. For this to work, Thunderbird needs a copy of your public "
"key. At this time, Thunderbird doesn’t fetch the public key from "
"``/usr/bin/qubes-gpg-client-wrapper``, you must manually import it. Export "
"the key as follow (assuming the key ID would be ``777402E6D301615C``):"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:250
#: e21cd77a3fcb4db3b51e890a1b92c492
msgid "|tb78-8.png| |tb78-9.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: c8d2829ff7b448a4a92f82245332ad3c c33fd62f325c4099b37173913f4c6190
msgid "tb78-8.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: f163e7ac59fe4e30b14dcd3013c8dfe1 d85e0af2fec545739b350e54cbcfad67
msgid "tb78-9.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:252
#: f00ef9cb336a470f89440e8ed3eecbd7
msgid ""
"Use Thunderbird’s Tools menu to open *OpenPGP Key Management*. In that "
"window, use the File menu to access the *Import Public Key(s) From File* "
"command. Open the file with your public key. After the import was "
"successful, right click on the imported key in the list and select *Key "
"Properties*. You must mark your own key as *Yes, I’ve verified in person "
"this key has the correct fingerprint*."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:259
#: 36f7f44cd4454c69a0a6d8e17b6b4d06
msgid ""
"Once this is done, you should be able to send an encrypted and signed email "
"by selecting *Require Encryption* or *Digitally Sign This Message* in the "
"compose menu *Options* or *Security* toolbar button. You can try it by "
"sending an email to yourself."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:264
#: 2af3955c7512417e8e0663e782511932
msgid "|tb78-10.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: 1fe49d6d84a646d780814de382a9286e c67897839928424a8accbb22aa46e5d7
msgid "tb78-10.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:266
#: ddc2899d9d9444eba1ef668e0db1d039
msgid ""
"For more details about using smart cards/Split GPG with Thunderbird PGP "
"feature, please see `Thunderbird:OpenPGP:Smartcards "
"<https://wiki.mozilla.org/Thunderbird:OpenPGP:Smartcards>`__ from which the "
"above documentation is inspired."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:272
#: 3f83056fc9c847bc80463111596c5805
msgid "Older Thunderbird versions"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:274
#: f018603aaee1428e8c9d24ed16c3ab8f
msgid ""
"For Thunderbird versions below 78, the traditional Enigmail + Split GPG "
"setup is required. It is recommended to set up and use ``/usr/bin/qubes-gpg-"
"client-wrapper``, as discussed above, in Thunderbird through the Enigmail "
"addon."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:279
#: 91e240277c994f64bfad5133350698d5
msgid ""
"**Warning:** Before adding any account, configuring Enigmail with "
"``/usr/bin/qubes-gpg-client-wrapper`` is **required**. By default, Enigmail "
"will generate a default GPG key in ``work-email`` associated with the newly "
"created Thunderbird account. Generally, it corresponds to the email used in "
"``work-gpg`` associated to your private key. In consequence, a new, separate"
" private key will be stored in ``work-email`` but it *does not* correspond "
"to your private key in ``work-gpg``. Comparing the ``fingerprint`` or "
"``expiration date`` will show that they are not the same private key. In "
"order to prevent Enigmail using this default generated local key in ``work-"
"email``, you can safely remove it."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:291
#: d2bed80c05f240299dd7bfa01a62f04f
msgid ""
"On a fresh Enigmail install, your need to change the default ``Enigmail "
"Junior Mode``. Go to Thunderbird preferences and then privacy tab. Select "
"``Force using S/MIME and Enigmail``. Then, in the preferences of Enigmail, "
"make it point to ``/usr/bin/qubes-gpg-client-wrapper`` instead of the "
"standard GnuPG binary:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:298
#: 1dc5d98ed969480dbfd1a5614c00243b
msgid "|tb-enigmail-split-gpg-settings-2.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: 7d19020b673e4ed1b424d7816f3e59b8 356dded294094bf09a86584439276984
msgid "tb-enigmail-split-gpg-settings-2.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:301
#: ec546ca3954b479d8be7482d896d4306
msgid "Using Keybase with Split GPG"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:303
#: f9b7d745383f48fdacc5a1778771d465
msgid ""
"Keybase, a security focused messaging and file-sharing app with GPG "
"integration, can be configured to use Split GPG."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:306
#: be612cc8d1d547309c313d1a68ae0be0
msgid ""
"The Keybase service does not preserve/pass the ``QUBES_GPG_DOMAIN`` "
"environment variable through to underlying GPG processes, so it **must** be "
"configured to use ``/usr/bin/qubes-gpg-client-wrapper`` (as discussed above)"
" rather than ``/usr/bin/qubes-gpg-client``."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:311
#: 516645c56e714f978af458eb11125dd8
msgid ""
"The following command will configure Keybase to use ``/usr/bin/qubes-gpg-"
"client-wrapper`` instead of its built-in GPG client:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:319
#: 71e860b5b92948d889cbda61ee1af543
msgid ""
"Now that Keybase is configured to use ``qubes-gpg-client-wrapper``, you will"
" be able to use ``keybase pgp select`` to choose a GPG key from your backend"
" GPG app qube and link that key to your Keybase identity."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:324
#: 27dcdabcee0e4b6fa264e8b5b599f574
msgid "Using Git with Split GPG"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:326
#: bb9e65e2c387400cba910c5c4d98bc5e
msgid ""
"Git can be configured to used with Split GPG, something useful if you would "
"like to contribute to the Qubes OS Project as every commit is required to be"
" signed. The most basic ``~/.gitconfig`` file to with working Split GPG "
"looks something like this."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:341
#: fd65fa503b65455397ff3df0ea78af37
msgid ""
"Your key id is the public id of your signing key, which can be found by "
"running ``qubes-gpg-client -k``. In this instance, the key id is DD160C74."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:353
#: 21dbd1a8ca164f89a83cbc77f3f003fb
msgid ""
"To sign commits, you now add the “-S” flag to your commit command, which "
"should prompt for Split GPG usage. If you would like automatically sign all "
"commits, you can add the following snippet to ``~/.gitconfig``."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:362
#: eee3158eef734b86bccbc15152640a2b
msgid ""
"Lastly, if you would like to add aliases to sign and verify tags using the "
"conventions the Qubes OS Project recommends, you can add the following "
"snippet to ``~/.gitconfig``."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:372
#: ba3da60e9c70417d8363939edbb78964
msgid ""
"Replace ``user`` with your short, unique nickname. Now you can use ``git "
"stag`` to add a signed tag to a commit and ``git vtag`` to verify the most "
"recent tag that is reachable from a commit."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:377
#: 06892750caca4144b65f8f21777f1226
msgid "Importing public keys"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:379
#: 4e884c7db8594156b0cb791be6a76735
msgid ""
"Use ``qubes-gpg-import-key`` in the client app qube to import the key into "
"the GPG backend VM."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:387
#: 7ff9be061edf42d0900daa42e7552785
msgid "A safe, unspoofable user consent dialog box is displayed."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:389
#: 162054f2ea944525a9a089727c8ee5af
msgid "|r2-split-gpg-5.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:0
#: e98a9552b0aa44d19a39bda97043df59 b57490a88d6f4bdba8b44ef59ce707a0
msgid "r2-split-gpg-5.png"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:391
#: 1cca7dac288d4599af5a35753a1b7ea8
msgid ""
"Selecting “Yes to All” will add a line in the corresponding :doc:`RPC Policy"
" </user/advanced-topics/rpc-policy>` file."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:395
#: 06f9999c57fa4bac9894882a7bfbdbb0
msgid "Advanced: Using Split GPG with Subkeys"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:397
#: 9c0542b61c634c1e842ef2d39ebef154
msgid ""
"Users with particularly high security requirements may wish to use Split GPG"
" with `subkeys <https://wiki.debian.org/Subkeys>`__. However, this setup "
"comes at a significant cost: It will be impossible to sign other people’s "
"keys with the master secret key without breaking this security model. "
"Nonetheless, if signing others’ keys is not required, then Split GPG with "
"subkeys offers unparalleled security for one’s master secret key."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:406
#: ebf694757be74729aaec3a9a6d7052e6
msgid "Setup Description"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:408
#: ecd58ede5a6147d2bd8dcc4beb4e0bea
msgid ""
"In this example, the following keys are stored in the following locations "
"(see below for definitions of these terms):"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:412
#: 49ab1fa429374c248a402312585bff45
msgid "PGP Key(s)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:412
#: 8b669c656d5e4d4eb4509ad86ee8243c
msgid "VM Name"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:414
#: 2b281a56dc284e7f81e97d523bc78a03
msgid "``sec``"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:414
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:481
#: d4d098dd18ab45f0b806874bfb4951ab 3e421456feec43fda0b9891f66bd87f7
msgid "``vault``"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:415
#: c39ae7bb4e034414a573b5f849d48a84
msgid "``ssb``"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:415
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:490
#: 9a7c00d8446f4088b1d4c8b10a0460c0 110d743d96f34f308c46ac4df20b1523
msgid "``work-gpg``"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:416
#: ee1c4176554e447785ba7ae39671c0fa
msgid "``pub``"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:416
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:500
#: 750ee0a7d4574c93a3fddb087fcbbf0e 08eb4dec1baf48d5968ed1123afd2afa
msgid "``work-email``"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:419
#: 9f7beee0bf8146ce804bdc5d8c2d098f
msgid "``sec`` (master secret key)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:421
#: d17359b7ed89451a99c43861f99a69ad
msgid ""
"Depending on your needs, you may wish to create this as a **certify-only "
"(C)** key, i.e., a key which is capable only of signing (a.k.a., "
"“certifying”) other keys. This key may be created *without* an expiration "
"date. This is for two reasons. First, the master secret key is never to "
"leave the ``vault`` VM, so it is extremely unlikely ever to be obtained by "
"an adversary (see below). Second, an adversary who *does* manage to obtain "
"the master secret key either possesses the passphrase to unlock the key (if "
"one is used) or does not. An adversary who *does* possess the passphrase can"
" simply use it to legally extend the expiration date of the key (or remove "
"it entirely). An adversary who does *not* possess the passphrase cannot use "
"the key at all. In either case, an expiration date provides no additional "
"benefit."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:435
#: e7632588fd42430a86188094f48fc46f
msgid ""
"By the same token, however, having a passphrase on the key is of little "
"value. An adversary who is capable of stealing the key from your ``vault`` "
"would almost certainly also be capable of stealing the passphrase as you "
"enter it. An adversary who obtains the passphrase can then use it in order "
"to change or remove the passphrase from the key. Therefore, using a "
"passphrase at all should be considered optional. It is, however, recommended"
" that a **revocation certificate** be created and safely stored in multiple "
"locations so that the master keypair can be revoked in the (exceedingly "
"unlikely) event that it is ever compromised."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:446
#: 685069f93f064bb5aae7d68bc0989a48
msgid "``ssb`` (secret subkey)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:448
#: 010212068a704e7bb2cb86cb71ffd6c2
msgid ""
"Depending on your needs, you may wish to create two different subkeys: one "
"for **signing (S)** and one for **encryption (E)**. You may also wish to "
"give these subkeys reasonable expiration dates (e.g., one year). Once these "
"keys expire, it is up to you whether to *renew* these keys by extending the "
"expiration dates or to create *new* subkeys when the existing set expires."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:455
#: 1393ceff917a48ca812a744e03e20e1e
msgid ""
"On the one hand, an adversary who obtains any existing encryption subkey "
"(for example) will be able to use it in order to decrypt all emails (for "
"example) which were encrypted to that subkey. If the same subkey were to "
"continue to be used–and its expiration date continually extended–only that "
"one key would need to be stolen (e.g., as a result of the ``work-gpg`` VM "
"being compromised; see below) in order to decrypt *all* of the user’s "
"emails. If, on the other hand, each encryption subkey is used for at most "
"approximately one year, then an adversary who obtains the secret subkey will"
" be capable of decrypting at most approximately one year’s worth of emails."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:466
#: f99d5195fba64114b9ddc899ea1dfe94
msgid ""
"On the other hand, creating a new signing subkey each year without renewing "
"(i.e., extending the expiration dates of) existing signing subkeys would "
"mean that all of your old signatures would eventually read as “EXPIRED” "
"whenever someone attempts to verify them. This can be problematic, since "
"there is no consensus on how expired signatures should be handled. "
"Generally, digital signatures are intended to last forever, so this is a "
"strong reason against regularly retiring one’s signing subkeys."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:475
#: bab8c142f1f44939801c157ae5ccc4e0
msgid "``pub`` (public key)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:477
#: 641c9924f13b4d94b5a41602844ed5fe
msgid ""
"This is the complement of the master secret key. It can be uploaded to "
"keyservers (or otherwise publicly distributed) and may be signed by others."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:483
#: c6db0b99ddad46909789dd01e4b2129b
msgid ""
"This is a network-isolated VM. The initial master keypair and subkeys are "
"generated in this VM. The master secret key *never* leaves this VM under "
"*any* circumstances. No files or text is *ever* `copied </user/how-to-"
"guides/how-to-copy-and-move-files.html#security>`__ or `pasted </user/how-"
"to-guides/how-to-copy-and-paste-text.html#security>`__ into this VM under "
"*any* circumstances."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:492
#: 7a072b5493384548b49426389ea2f063
msgid ""
"This is a network-isolated VM. This VM is used *only* as the GPG backend for"
" ``work-email``. The secret subkeys (but *not* the master secret key) are "
"`copied </user/how-to-guides/how-to-copy-and-move-files.html#security>`__ "
"from the ``vault`` VM to this VM. Files from less trusted VMs are *never* "
"`copied </user/how-to-guides/how-to-copy-and-move-files.html#security>`__ "
"into this VM under *any* circumstances."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:502
#: f287b3b2687b44d7ad7703345ebaff12
msgid ""
"This VM has access to the mail server. It accesses the ``work-gpg`` VM via "
"the Split GPG protocol. The public key may be stored in this VM so that it "
"can be attached to emails and for other such purposes."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:507
#: 5c8966b011474e8aa92937b02182c3a6
msgid "Security Benefits"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:509
#: c96d1117d3314b7eb334bc62768d99a5
msgid ""
"In the standard Split GPG setup, there are at least two ways in which the "
"``work-gpg`` VM might be compromised. First, an attacker who is capable of "
"exploiting a hypothetical bug in ``work-email``\\ ’s `MUA "
"<https://en.wikipedia.org/wiki/Mail_user_agent>`__ could gain control of the"
" ``work-email`` VM and send a malformed request which exploits a "
"hypothetical bug in the GPG backend (running in the ``work-gpg`` VM), giving"
" the attacker control of the ``work-gpg`` VM. Second, a malicious public key"
" file which is imported into the ``work-gpg`` VM might exploit a "
"hypothetical bug in the GPG backend which is running there, again giving the"
" attacker control of the ``work-gpg`` VM. In either case, such an attacker "
"might then be able to leak both the master secret key and its passphrase (if"
" any is used, it would regularly be input in the work-gpg VM and therefore "
"easily obtained by an attacker who controls this VM) back to the ``work-"
"email`` VM or to another VM (e.g., the ``netvm``, which is always untrusted "
"by default) via the Split GPG protocol or other :doc:`covert channels "
"</user/security-in-qubes/data-leaks>`. Once the master secret key is in the "
"``work-email`` VM, the attacker could simply email it to himself (or to the "
"world)."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:529
#: 9dbee01167174ea5981724e74a24af47
msgid ""
"In the alternative setup described in this section (i.e., the subkey setup),"
" even an attacker who manages to gain access to the ``work-gpg`` VM will not"
" be able to obtain the user’s master secret key since it is simply not "
"there. Rather, the master secret key remains in the ``vault`` VM, which is "
"extremely unlikely to be compromised, since nothing is ever copied or "
"transferred into it. \\* The attacker might nonetheless be able to leak the "
"secret subkeys from the ``work-gpg`` VM in the manner described above, but "
"even if this is successful, the secure master secret key can simply be used "
"to revoke the compromised subkeys and to issue new subkeys in their place. "
"(This is significantly less devastating than having to create a new *master*"
" keypair.)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:541
#: 2d4adf82bc6e439b9cbf8e19378df139
msgid ""
"\\*In order to gain access to the ``vault`` VM, the attacker would require "
"the use of, e.g., a general Xen VM escape exploit or a `signed, compromised "
"package which is already installed in the template "
"</user/templates/templates.html#trusting-your-templates>`__ upon which the "
"``vault`` VM is based."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:548
#: 46de439c63a3404c9a6e01df54b35c80
msgid "Subkey Tutorials and Discussions"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:550
#: 94c066d259564bce8d5922ccec9063ff
msgid ""
"(Note: Although the tutorials below were not written with Qubes Split GPG in"
" mind, they can be adapted with a few commonsense adjustments. As always, "
"exercise caution and use your good judgment.)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:554
#: 8444f28e77f147d8ae3e5dcb3be1728a
msgid ""
"`“OpenPGP in Qubes OS” on the qubes-users mailing list "
"<https://groups.google.com/d/topic/qubes-users/Kwfuern-R2U/discussion>`__"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:556
#: 3f4cb3ade7704fa8957ad4ec7bc4c566
msgid ""
"`“Creating the Perfect GPG Keypair” by Alex Cabal "
"<https://alexcabal.com/creating-the-perfect-gpg-keypair/>`__"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:558
#: 1ae9a68d9fe048e7ba3e86f496bd4327
msgid ""
"`“GPG Offline Master Key w/ smartcard” maintained by Abel Luck "
"<https://gist.github.com/abeluck/3383449>`__"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:560
#: aeaee71d0ffe46fe809a6a64e9b831cc
msgid ""
"`“Using GnuPG with QubesOS” by Alex "
"<https://apapadop.wordpress.com/2013/08/21/using-gnupg-with-qubesos/>`__"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:564
#: c00cc8cd1596432a85a95921d9bae63e
msgid "Current limitations"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:566
#: fe607ffa4b3a4c5fbeef9d407ee10aa9
msgid ""
"Current implementation requires importing of public keys to the vault "
"domain. This opens up an avenue to attack the gpg running in the backend "
"domain via a hypothetical bug in public key importing code. See ticket `#474"
" <https://github.com/QubesOS/qubes-issues/issues/474>`__ for more details "
"and plans how to get around this problem, as well as the section on `using "
"Split GPG with subkeys <#advanced-using-split-gpg-with-subkeys>`__."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:575
#: b9c6dc3b6a344fb6801a47b8b5804dc6
msgid ""
"It doesn’t solve the problem of allowing the user to know what is to be "
"signed before the operation gets approved. Perhaps the GPG backend domain "
"could start a disposable and have the to-be-signed document displayed there?"
" To Be Determined."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:580
#: 00aea635e0454650882f827d7af37fb9
msgid ""
"The Split GPG client will fail to sign or encrypt if the private key in the "
"GnuPG backend is protected by a passphrase. It will give an ``Inappropriate "
"ioctl for device`` error. Do not set passphrases for the private keys in the"
" GPG backend domain. Doing so won’t provide any extra security anyway, as "
"explained in the introduction and in `using Split GPG with subkeys "
"<#advanced-using-split-gpg-with-subkeys>`__. If you are generating a new key"
" pair, or if you have a private key that already has a passphrase, you can "
"use ``gpg2 --edit-key <key_id>`` then ``passwd`` to set an empty passphrase."
" Note that ``pinentry`` might show an error when you try to set an empty "
"passphrase, but it will still make the change. (See `this StackExchange "
"answer <https://unix.stackexchange.com/a/379373>`__ for more information.) "
"Note: The error shows only if you **do not** have graphical pinentry "
"installed."
msgstr ""
