# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-23 17:29+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:1
#: ba25ffb4324c494f844646df22b13bd9
msgid "Split GPG implements a concept similar to having a smart card with your private GPG keys, except that the role of the “smart card” is played by another Qubes app qube. This way one not-so-trusted domain, e.g. the one where Thunderbird is running, can delegate all crypto operations – such as encryption/decryption and signing – to another, more trusted, network-isolated domain. This way the compromise of your domain where Thunderbird or another client app is running – arguably a not-so-unthinkable scenario – does not allow the attacker to automatically also steal all your keys. (We should make a rather obvious comment here that the so-often-used passphrases on private keys are pretty meaningless because the attacker can easily set up a simple backdoor which would wait until the user enters the passphrase and steal the key then.)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:15
#: 504c97655ea540bfa0ac665364f565fa
msgid "|split-gpg-diagram.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:17
#: 4dd4dc2903504821bc7b8494f2ee7630
msgid "This diagram presents an overview of the Split GPG architecture."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:20
#: f8a82e54a3844c6ba1e148e185952be9
msgid "Advantages of Split GPG vs. traditional GPG with a smart card"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:22
#: bca4bad516614bbabd4fe5a6889fcaef
msgid "It is often thought that the use of smart cards for private key storage guarantees ultimate safety. While this might be true (unless the attacker can find a usually-very-expensive-and-requiring-physical-presence way to extract the key from the smart card) but only with regards to the safety of the private key itself. However, there is usually nothing that could stop the attacker from requesting the smart card to perform decryption of all the user documents the attacker has found or need to decrypt. In other words, while protecting the user’s private key is an important task, we should not forget that ultimately it is the user data that are to be protected and that the smart card chip has no way of knowing the requests to decrypt documents are now coming from the attacker’s script and not from the user sitting in front of the monitor. (Similarly the smart card doesn’t make the process of digitally signing a document or a transaction in any way more secure – the user cannot know what the chip is really signing. Unfortunately this problem of signing reliability is not solvable by Split GPG)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:40
#: a6115cc2787f490cb0fbf76afb5a7afb
msgid "With Qubes Split GPG this problem is drastically minimized, because each time the key is to be used the user is asked for consent (with a definable time out, 5 minutes by default), plus is always notified each time the key is used via a tray notification from the domain where GPG backend is running. This way it would be easy to spot unexpected requests to decrypt documents."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:47
#: 7fb9c86a150e42269f8f163c93e92d7a
msgid "|r2-split-gpg-1.png| |r2-split-gpg-3.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:50
#: b35e33233615424686f5514ff1d23197
msgid "Configuring Split GPG"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:52
#: c173a969ce5c4d458cb84f91a80486b5
msgid "In dom0, make sure the ``qubes-gpg-split-dom0`` package is installed."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:58
#: 38c2040221344951a9c98510c918e0d0
msgid "Make sure you have the ``qubes-gpg-split`` package installed in the template you will use for the GPG domain."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:61
#: f69e1e2992044ada9cb9dda42205d793
msgid "For Debian or Whonix:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:67
#: a6dc01e7844f4abbbbe11b759a488e17
msgid "For Fedora:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:74
#: a96b2b45d911499ea59d132968720790
msgid "Setting up the GPG backend domain"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:76
#: 348938bc5670489cbf4e3b7461dc4022
msgid "First, create a dedicated app qube for storing your keys (we will be calling it the GPG backend domain). It is recommended that this domain be network disconnected (set its netvm to ``none``) and only used for this one purpose. In later examples this app qube is named ``work-gpg``, but of course it might have any other name."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:82
#: 87395b3c745f472da92e6b5b97f90fbc
msgid "Make sure that gpg is installed there. At this stage you can add the private keys you want to store there, or you can now set up Split GPG and add the keys later. To check which private keys are in your GPG keyring, use:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:97
#: c9d176187ab545ca97383556476877fe
msgid "This is pretty much all that is required. However, you might want to modify the default timeout: this tells the backend for how long the user’s approval for key access should be valid. (The default is 5 minutes.) You can change this via the ``QUBES_GPG_AUTOACCEPT`` environment variable. You can override it e.g. in ``~/.profile``:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:107
#: 98ae00e12e8a4d07abbaa8a3cca5cd02
msgid "Please note that previously, this parameter was set in ~/.bash_profile. This will no longer work. If you have the parameter set in ~/.bash_profile you *must* update your configuration."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:111
#: c8e5e9dcaa3c4b7289171b382e0e1bf9
msgid "Please be aware of the caveat regarding passphrase-protected keys in the `Current limitations <#current-limitations>`__ section."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:115
#: 39d2cd2132894a219b34d221d0b15b20
msgid "Configuring the client apps to use Split GPG backend"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:117
#: e2719dfb086841cea61535b3842b077a
msgid "Normally it should be enough to set the ``QUBES_GPG_DOMAIN`` to the GPG backend domain name and use ``qubes-gpg-client`` in place of ``gpg``, e.g.:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:136
#: 4bf724e5f03948acb1ffb9185fec0d5b
msgid "Note that running normal ``gpg -K`` in the demo above shows no private keys stored in this app qube."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:139
#: 49cf2a0ee6a54176b73abc65792a0a81
msgid "A note on ``gpg`` and ``gpg2``:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:141
#: d5f5ca07829f49b88bc083d184792558
msgid "Throughout this guide, we refer to ``gpg``, but note that Split GPG uses ``gpg2`` under the hood for compatibility with programs like Enigmail (which now supports only ``gpg2``). If you encounter trouble while trying to set up Split GPG, make sure you’re using ``gpg2`` for your configuration and testing, since keyring data may differ between the two installations."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:149
#: bff51fedbd214a3cb1a60ffefeb1b5f9
msgid "Advanced Configuration"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:151
#: fb27e09d2a764acf9610dc47e5ab13c0
msgid "The ``qubes-gpg-client-wrapper`` script sets the ``QUBES_GPG_DOMAIN`` variable automatically based on the content of the file ``/rw/config/gpg-split-domain``, which should be set to the name of the GPG backend VM. This file survives the app qube reboot, of course."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:161
#: 68a55dd9c15d40f9bda4a120e7e9cccf
msgid "Split GPG’s default qrexec policy requires the user to enter the name of the app qube containing GPG keys on each invocation. To improve usability for applications like Thunderbird with Enigmail, in ``dom0`` place the following line at the top of the file ``/etc/qubes-rpc/policy/qubes.Gpg``:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:171
#: 61263568db79474f9d4c83a1c066ed03
msgid "where ``work-email`` is the Thunderbird + Enigmail app qube and ``work-gpg`` contains your GPG keys."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:174
#: dd5f12dfbbe74a1a9a4fa86666a90b2d
msgid "You may also edit the qrexec policy file for Split GPG in order to tell Qubes your default gpg vm (qrexec prompts will appear with the gpg vm preselected as the target, instead of the user needing to type a name in manually). To do this, append ``,default_target=<vmname>`` to ``ask`` in ``/etc/qubes-rpc/policy/qubes.Gpg``. For the examples given on this page:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:185
#: b66fdd76206445568bc2163a3cd850d3
msgid "Note that, because this makes it easier to accept Split GPG’s qrexec authorization prompts, it may decrease security if the user is not careful in reviewing presented prompts. This may also be inadvisable if there are multiple app qubes with Split GPG set up."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:191
#: e36a439f3456430b8c2ea6fde6b419df
msgid "Using Thunderbird"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:194
#: a383c572af4f4167b7986818f9751064
msgid "Thunderbird 78 and higher"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:196
#: 65186b9b9e9c4f878a96c4f6b610db65
msgid "Starting with version 78, Thunderbird has a built-in PGP feature and no longer requires the Enigmail extension. For users coming from the Enigmail extension, the built-in functionality is more limited currently, including that **public keys must live in your ``work-email`` qube with Thunderbird rather than your offline ``work-gpg`` qube**."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:202
#: d32f767311934286946a7b332419957d
msgid "In ``work-email``, use the Thunderbird config editor (found at the bottom of preferences/options), and search for ``mail.openpgp.allow_external_gnupg``. Switch the value to true. Still in config editor, search for ``mail.openpgp.alternative_gpg_path``. Set its value to ``/usr/bin/qubes-gpg-client-wrapper``. Restart Thunderbird after this change."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:209
#: 427cb8e5e11045e5a44ea217805e119e
msgid "|tb78-1.png| |tb78-2.png| |tb78-3.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:211
#: 13e412c0c5f645d2bd530d9c081f5b48
msgid "You need to obtain your key ID which should be **exactly 16 characters**. Enter the command ``qubes-gpg-client-wrapper -K --keyid-format long``:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:229
#: b03a7326cbe84378883b5301b4f6ff17
msgid "Open the Account Settings and open the *End-to-End Encryption* tab of the respective email account. Click the *Add Key* button. You’ll be offered the choice *Use your external key through GnuPG*. Select it and click Continue."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:234
#: 27448312c4f945ed81b28d2871b6a8db
msgid "|tb78-4.png| |tb78-5.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:236
#: 4f13158bdc57469283ce7b6cd39ffdcd
msgid "The key ID reference you would need here is ``777402E6D301615C``. Now paste or type the ID of the secret key that you would like to use. Be careful to enter it correctly, because your input isn’t verified. Confirm to save this key ID. Now you can select the key ID to use."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:241
#: f6516c8f0047438cb4b0fb3c869ea58c
msgid "|tb78-6.png| |tb78-7.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:243
#: b27c25a8a3e847119476bf3c8babd6a3
msgid "This key ID will be used to digitally sign or send an encrypted message with your account. For this to work, Thunderbird needs a copy of your public key. At this time, Thunderbird doesn’t fetch the public key from ``/usr/bin/qubes-gpg-client-wrapper``, you must manually import it. Export the key as follow (assuming the key ID would be ``777402E6D301615C``):"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:250
#: eadf7b40166942af80805472999b4e1e
msgid "|tb78-8.png| |tb78-9.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:252
#: 5c54e6733c12455797f18c2398d29ecf
msgid "Use Thunderbird’s Tools menu to open *OpenPGP Key Management*. In that window, use the File menu to access the *Import Public Key(s) From File* command. Open the file with your public key. After the import was successful, right click on the imported key in the list and select *Key Properties*. You must mark your own key as *Yes, I’ve verified in person this key has the correct fingerprint*."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:259
#: acecc62161cc4fdb9fda57e4b188ed3d
msgid "Once this is done, you should be able to send an encrypted and signed email by selecting *Require Encryption* or *Digitally Sign This Message* in the compose menu *Options* or *Security* toolbar button. You can try it by sending an email to yourself."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:264
#: a4f57ea57d1a46ce9f1099e179675185
msgid "|tb78-10.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:266
#: 4dccb84580464274a656db55a192d277
msgid "For more details about using smart cards/Split GPG with Thunderbird PGP feature, please see `Thunderbird:OpenPGP:Smartcards <https://wiki.mozilla.org/Thunderbird:OpenPGP:Smartcards>`__ from which the above documentation is inspired."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:272
#: 55868229de2343c7adcb924c5f90b0b2
msgid "Older Thunderbird versions"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:274
#: 043aac536c394117932a185ff16dc84a
msgid "For Thunderbird versions below 78, the traditional Enigmail + Split GPG setup is required. It is recommended to set up and use ``/usr/bin/qubes-gpg-client-wrapper``, as discussed above, in Thunderbird through the Enigmail addon."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:279
#: 8f7543342e1e4102a07a1b051e445b7c
msgid "**Warning:** Before adding any account, configuring Enigmail with ``/usr/bin/qubes-gpg-client-wrapper`` is **required**. By default, Enigmail will generate a default GPG key in ``work-email`` associated with the newly created Thunderbird account. Generally, it corresponds to the email used in ``work-gpg`` associated to your private key. In consequence, a new, separate private key will be stored in ``work-email`` but it *does not* correspond to your private key in ``work-gpg``. Comparing the ``fingerprint`` or ``expiration date`` will show that they are not the same private key. In order to prevent Enigmail using this default generated local key in ``work-email``, you can safely remove it."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:291
#: 329e9f64f9994df8b70f47ce58a49918
msgid "On a fresh Enigmail install, your need to change the default ``Enigmail Junior Mode``. Go to Thunderbird preferences and then privacy tab. Select ``Force using S/MIME and Enigmail``. Then, in the preferences of Enigmail, make it point to ``/usr/bin/qubes-gpg-client-wrapper`` instead of the standard GnuPG binary:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:298
#: a0d61b0ffd1c4f5fa4fb1ecaee77654a
msgid "|tb-enigmail-split-gpg-settings-2.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:301
#: e163a7bbe5cf4c92a827fd7e777754ed
msgid "Using Keybase with Split GPG"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:303
#: 560eb145cf4f43ef8fd099c144dec4d0
msgid "Keybase, a security focused messaging and file-sharing app with GPG integration, can be configured to use Split GPG."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:306
#: 9eab94104786420b8ac5e1c3e39f4115
msgid "The Keybase service does not preserve/pass the ``QUBES_GPG_DOMAIN`` environment variable through to underlying GPG processes, so it **must** be configured to use ``/usr/bin/qubes-gpg-client-wrapper`` (as discussed above) rather than ``/usr/bin/qubes-gpg-client``."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:311
#: a758062ac7924a389218ebcb8e523e99
msgid "The following command will configure Keybase to use ``/usr/bin/qubes-gpg-client-wrapper`` instead of its built-in GPG client:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:319
#: d7137e6850de436e963922f650d4b49a
msgid "Now that Keybase is configured to use ``qubes-gpg-client-wrapper``, you will be able to use ``keybase pgp select`` to choose a GPG key from your backend GPG app qube and link that key to your Keybase identity."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:324
#: 3ada158fcf2043308121a3b932d8bf70
msgid "Using Git with Split GPG"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:326
#: 3f301eae0e6a49dbaca653520a516ddd
msgid "Git can be configured to used with Split GPG, something useful if you would like to contribute to the Qubes OS Project as every commit is required to be signed. The most basic ``~/.gitconfig`` file to with working Split GPG looks something like this."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:341
#: 1e25045cc6134283a59a7d7a0b8bf61b
msgid "Your key id is the public id of your signing key, which can be found by running ``qubes-gpg-client -k``. In this instance, the key id is DD160C74."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:353
#: 17bc8616ee1b49999e7a3d698bc5e510
msgid "To sign commits, you now add the “-S” flag to your commit command, which should prompt for Split GPG usage. If you would like automatically sign all commits, you can add the following snippet to ``~/.gitconfig``."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:362
#: b39a3941684045eb98bc42a95657e6ec
msgid "Lastly, if you would like to add aliases to sign and verify tags using the conventions the Qubes OS Project recommends, you can add the following snippet to ``~/.gitconfig``."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:372
#: 2561b007b7ae49019d8da5af91667d6d
msgid "Replace ``user`` with your short, unique nickname. Now you can use ``git stag`` to add a signed tag to a commit and ``git vtag`` to verify the most recent tag that is reachable from a commit."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:377
#: e1bc610179bf4ccc8a5267de19d957ea
msgid "Importing public keys"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:379
#: 82b2ad9abf8c433dba31463fdc4bf884
msgid "Use ``qubes-gpg-import-key`` in the client app qube to import the key into the GPG backend VM."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:387
#: 364e0bf4b49d49eab0688da915b05b7f
msgid "A safe, unspoofable user consent dialog box is displayed."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:389
#: 435df424ba5c4fc78f5b9fc2403ef8a4
msgid "|r2-split-gpg-5.png|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:391
#: 24350cd5020248fb86ded576ff6cec20
msgid "Selecting “Yes to All” will add a line in the corresponding :doc:`RPC Policy </user/advanced-topics/rpc-policy>` file."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:395
#: acd0f132fb804c42b2c39de8b65e368c
msgid "Advanced: Using Split GPG with Subkeys"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:397
#: 51d34c7500144089a2abb2ef35b8ebde
msgid "Users with particularly high security requirements may wish to use Split GPG with `subkeys <https://wiki.debian.org/Subkeys>`__. However, this setup comes at a significant cost: It will be impossible to sign other people’s keys with the master secret key without breaking this security model. Nonetheless, if signing others’ keys is not required, then Split GPG with subkeys offers unparalleled security for one’s master secret key."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:406
#: a0485904b94f4c9a9b0b046a98655f5f
msgid "Setup Description"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:408
#: 0bd8ae3aba5946bfb8b787feaca5ba93
msgid "In this example, the following keys are stored in the following locations (see below for definitions of these terms):"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:412
#: b953dfaea7464af5aa74b6ce547a061f
msgid "PGP Key(s)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:412
#: 322beebd8dda424795440aa7d83daddf
msgid "VM Name"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:414
#: 22ed189badcb45c094591a7d6189b611
msgid "``sec``"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:414
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:481
#: dfa5b445a6a44ceab99a1e37f876746e
#: 6b0275a3461347a3a2b6d20df723d5ff
msgid "``vault``"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:415
#: f06fa15df35641d4a58a22f2b614daab
msgid "``ssb``"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:415
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:490
#: 518b91bb5dc64a789064ae7eb5dc87a3
#: 58fe5db2b5b447fba0b90b3b3362de46
msgid "``work-gpg``"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:416
#: bc53a126ffbe41cb98bc1bdc47cf9a80
msgid "``pub``"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:416
#: ../../../_doc/user/security-in-qubes/split-gpg.rst:500
#: 19c6709356134c35b589a1f2f31e815b
#: 66adab90ba6b4dd198e3b811b0e73707
msgid "``work-email``"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:419
#: 166d84a0d97b497586b5a625cfb5583e
msgid "``sec`` (master secret key)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:421
#: defd8b26010b4cd685e5c24283dfd93a
msgid "Depending on your needs, you may wish to create this as a **certify-only (C)** key, i.e., a key which is capable only of signing (a.k.a., “certifying”) other keys. This key may be created *without* an expiration date. This is for two reasons. First, the master secret key is never to leave the ``vault`` VM, so it is extremely unlikely ever to be obtained by an adversary (see below). Second, an adversary who *does* manage to obtain the master secret key either possesses the passphrase to unlock the key (if one is used) or does not. An adversary who *does* possess the passphrase can simply use it to legally extend the expiration date of the key (or remove it entirely). An adversary who does *not* possess the passphrase cannot use the key at all. In either case, an expiration date provides no additional benefit."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:435
#: f766f68db41c4849b76e63b232d9d0d8
msgid "By the same token, however, having a passphrase on the key is of little value. An adversary who is capable of stealing the key from your ``vault`` would almost certainly also be capable of stealing the passphrase as you enter it. An adversary who obtains the passphrase can then use it in order to change or remove the passphrase from the key. Therefore, using a passphrase at all should be considered optional. It is, however, recommended that a **revocation certificate** be created and safely stored in multiple locations so that the master keypair can be revoked in the (exceedingly unlikely) event that it is ever compromised."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:446
#: 9b442f1621444eb381c1432e913065bd
msgid "``ssb`` (secret subkey)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:448
#: 1f01e23a79cf4abdb381345735661a06
msgid "Depending on your needs, you may wish to create two different subkeys: one for **signing (S)** and one for **encryption (E)**. You may also wish to give these subkeys reasonable expiration dates (e.g., one year). Once these keys expire, it is up to you whether to *renew* these keys by extending the expiration dates or to create *new* subkeys when the existing set expires."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:455
#: ceacbd32c049448db905efccad91ee3f
msgid "On the one hand, an adversary who obtains any existing encryption subkey (for example) will be able to use it in order to decrypt all emails (for example) which were encrypted to that subkey. If the same subkey were to continue to be used–and its expiration date continually extended–only that one key would need to be stolen (e.g., as a result of the ``work-gpg`` VM being compromised; see below) in order to decrypt *all* of the user’s emails. If, on the other hand, each encryption subkey is used for at most approximately one year, then an adversary who obtains the secret subkey will be capable of decrypting at most approximately one year’s worth of emails."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:466
#: 798cdc6079754379be393f86edee8699
msgid "On the other hand, creating a new signing subkey each year without renewing (i.e., extending the expiration dates of) existing signing subkeys would mean that all of your old signatures would eventually read as “EXPIRED” whenever someone attempts to verify them. This can be problematic, since there is no consensus on how expired signatures should be handled. Generally, digital signatures are intended to last forever, so this is a strong reason against regularly retiring one’s signing subkeys."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:475
#: 0241e10ba9cf47a98e8e8929ed6eb955
msgid "``pub`` (public key)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:477
#: 804283d1b74a447795eac228177e3552
msgid "This is the complement of the master secret key. It can be uploaded to keyservers (or otherwise publicly distributed) and may be signed by others."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:483
#: 987897b473f046f8bb25db5846cce47e
msgid "This is a network-isolated VM. The initial master keypair and subkeys are generated in this VM. The master secret key *never* leaves this VM under *any* circumstances. No files or text is *ever* `copied </user/how-to-guides/how-to-copy-and-move-files.html#security>`__ or `pasted </user/how-to-guides/how-to-copy-and-paste-text.html#security>`__ into this VM under *any* circumstances."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:492
#: c87f8d984ce749fb81fca5d9574acb89
msgid "This is a network-isolated VM. This VM is used *only* as the GPG backend for ``work-email``. The secret subkeys (but *not* the master secret key) are `copied </user/how-to-guides/how-to-copy-and-move-files.html#security>`__ from the ``vault`` VM to this VM. Files from less trusted VMs are *never* `copied </user/how-to-guides/how-to-copy-and-move-files.html#security>`__ into this VM under *any* circumstances."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:502
#: 793897680e764f75afcb9ab6761ef94e
msgid "This VM has access to the mail server. It accesses the ``work-gpg`` VM via the Split GPG protocol. The public key may be stored in this VM so that it can be attached to emails and for other such purposes."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:507
#: c36870a5d8fb4ba483bd12d3da888b31
msgid "Security Benefits"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:509
#: d40831a1dc7d4754b9bb43a3037bf96d
msgid "In the standard Split GPG setup, there are at least two ways in which the ``work-gpg`` VM might be compromised. First, an attacker who is capable of exploiting a hypothetical bug in ``work-email``\\ ’s `MUA <https://en.wikipedia.org/wiki/Mail_user_agent>`__ could gain control of the ``work-email`` VM and send a malformed request which exploits a hypothetical bug in the GPG backend (running in the ``work-gpg`` VM), giving the attacker control of the ``work-gpg`` VM. Second, a malicious public key file which is imported into the ``work-gpg`` VM might exploit a hypothetical bug in the GPG backend which is running there, again giving the attacker control of the ``work-gpg`` VM. In either case, such an attacker might then be able to leak both the master secret key and its passphrase (if any is used, it would regularly be input in the work-gpg VM and therefore easily obtained by an attacker who controls this VM) back to the ``work-email`` VM or to another VM (e.g., the ``netvm``, which is always untrusted by default) via the Split GPG protocol or other :doc:`covert channels </user/security-in-qubes/data-leaks>`. Once the master secret key is in the ``work-email`` VM, the attacker could simply email it to himself (or to the world)."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:529
#: ccc59505cc154eea9a59c3950a53c8df
msgid "In the alternative setup described in this section (i.e., the subkey setup), even an attacker who manages to gain access to the ``work-gpg`` VM will not be able to obtain the user’s master secret key since it is simply not there. Rather, the master secret key remains in the ``vault`` VM, which is extremely unlikely to be compromised, since nothing is ever copied or transferred into it. \\* The attacker might nonetheless be able to leak the secret subkeys from the ``work-gpg`` VM in the manner described above, but even if this is successful, the secure master secret key can simply be used to revoke the compromised subkeys and to issue new subkeys in their place. (This is significantly less devastating than having to create a new *master* keypair.)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:541
#: dcb263eeb17542f6988b20b655df138a
msgid "\\*In order to gain access to the ``vault`` VM, the attacker would require the use of, e.g., a general Xen VM escape exploit or a `signed, compromised package which is already installed in the template </user/templates/templates.html#trusting-your-templates>`__ upon which the ``vault`` VM is based."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:548
#: b712f7f58de0426eb133bd69e6b868ba
msgid "Subkey Tutorials and Discussions"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:550
#: b143336621204dc88ffd6df31819bb34
msgid "(Note: Although the tutorials below were not written with Qubes Split GPG in mind, they can be adapted with a few commonsense adjustments. As always, exercise caution and use your good judgment.)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:554
#: 3ab7303bb43c4d5c8dc2d816d5aad434
msgid "`“OpenPGP in Qubes OS” on the qubes-users mailing list <https://groups.google.com/d/topic/qubes-users/Kwfuern-R2U/discussion>`__"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:556
#: 360bda4bc0cd4776a76b459ae7e8b2a0
msgid "`“Creating the Perfect GPG Keypair” by Alex Cabal <https://alexcabal.com/creating-the-perfect-gpg-keypair/>`__"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:558
#: 18a4003bbd414c2b907244321be69766
msgid "`“GPG Offline Master Key w/ smartcard” maintained by Abel Luck <https://gist.github.com/abeluck/3383449>`__"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:560
#: 6c35f3646d474689bdcb59744ed4ce1d
msgid "`“Using GnuPG with QubesOS” by Alex <https://apapadop.wordpress.com/2013/08/21/using-gnupg-with-qubesos/>`__"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:564
#: 6cb60fefabd74fd0af647d12cb731465
msgid "Current limitations"
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:566
#: b0f7582f8ee14af1bdecb20799f5b1be
msgid "Current implementation requires importing of public keys to the vault domain. This opens up an avenue to attack the gpg running in the backend domain via a hypothetical bug in public key importing code. See ticket `#474 <https://github.com/QubesOS/qubes-issues/issues/474>`__ for more details and plans how to get around this problem, as well as the section on `using Split GPG with subkeys <#advanced-using-split-gpg-with-subkeys>`__."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:575
#: 69677b37a4a6432392528ae759acfc46
msgid "It doesn’t solve the problem of allowing the user to know what is to be signed before the operation gets approved. Perhaps the GPG backend domain could start a disposable and have the to-be-signed document displayed there? To Be Determined."
msgstr ""

#: ../../../_doc/user/security-in-qubes/split-gpg.rst:580
#: 2261410283f346efbbe0851e54cdf8fa
msgid "The Split GPG client will fail to sign or encrypt if the private key in the GnuPG backend is protected by a passphrase. It will give an ``Inappropriate ioctl for device`` error. Do not set passphrases for the private keys in the GPG backend domain. Doing so won’t provide any extra security anyway, as explained in the introduction and in `using Split GPG with subkeys <#advanced-using-split-gpg-with-subkeys>`__. If you are generating a new key pair, or if you have a private key that already has a passphrase, you can use ``gpg2 --edit-key <key_id>`` then ``passwd`` to set an empty passphrase. Note that ``pinentry`` might show an error when you try to set an empty passphrase, but it will still make the change. (See `this StackExchange answer <https://unix.stackexchange.com/a/379373>`__ for more information.) Note: The error shows only if you **do not** have graphical pinentry installed."
msgstr ""
