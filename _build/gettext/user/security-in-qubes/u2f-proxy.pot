# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-23 17:29+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:1
#: 9e2442010e4d48c389caaf4af9656625
msgid "The `Qubes U2F Proxy <https://github.com/QubesOS/qubes-app-u2f>`__ is a secure proxy intended to make use of U2F two-factor authentication devices with web browsers without exposing the browser to the full USB stack, not unlike the :doc:`USB keyboard and mouse proxies </user/how-to-guides/how-to-use-usb-devices>` implemented in Qubes."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:8
#: e88dfc60077e43108416dde47fc66dc7
msgid "What is U2F?"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:10
#: 25f965a298d84a2c8e5e99fb26610757
msgid "`U2F <https://en.wikipedia.org/wiki/U2F>`__, which stands for “Universal 2nd Factor”, is a framework for authentication using hardware devices (U2F tokens) as “second factors”, i.e. *what you have* as opposed to *what you know*, like a passphrase. This additional control provides `good protection <https://krebsonsecurity.com/2018/07/google-security-keys-neutralized-employee-phishing/>`__ in cases in which the passphrase is stolen (e.g. by phishing or keylogging). While passphrase compromise may not be obvious to the user, a physical device that cannot be duplicated must be stolen to be used outside of the owner’s control. Nonetheless, it is important to note at the outset that U2F cannot guarantee security when the host system is compromised (e.g. a malware-infected operating system under an adversary’s control)."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:24
#: be34f044b21840ab959b94c1cf90ea6b
msgid "The U2F specification defines protocols for multiple layers from USB to the browser API, and the whole stack is intended to be used with web applications (most commonly websites) in browsers. In most cases, tokens are USB dongles. The protocol is very simple, allowing the devices to store very little state inside (so the tokens may be reasonably cheap) while simultaneously authenticating a virtually unlimited number of services (so each person needs only one token, not one token per application). The user interface is usually limited to a single LED and a button that is pressed to confirm each transaction, so the devices themselves are also easy to use."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:35
#: c27d989f60c14fb3aaf631961f628f4f
msgid "Currently, the most common form of two-step authentication consists of a numeric code that the user manually types into a web application. These codes are typically generated by an app on the user’s smartphone or sent via SMS. By now, it is well-known that this form of two-step authentication is vulnerable to phishing and man-in-the-middle attacks due to the fact that the application requesting the two-step authentication code is typically not itself authenticated by the user. (In other words, users can accidentally give their codes to attackers because they do not always know who is really requesting the code.) In the U2F model, by contrast, the browser ensures that the token receives valid information about the web application requesting authentication, so the token knows which application it is authenticating (for details, see `here <https://fidoalliance.org/specs/fido-u2f-v1.2-ps-20170411/fido-u2f-overview-v1.2-ps-20170411.html#site-specific-public-private-key-pairs>`__). Nonetheless, `some attacks are still possible <https://www.wired.com/story/chrome-yubikey-phishing-webusb/>`__ even with U2F (more on this below)."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:54
#: 442144f37390482697b667178a9ff414
msgid "The Qubes approach to U2F"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:56
#: ae0f82399993430299d5ef4dc73257fd
msgid "In a conventional setup, web browsers and the USB stack (to which the U2F token is connected) are all running in the same monolithic OS. Since the U2F model assumes that the browser is trustworthy, any browser in the OS is able to access any key stored on the U2F token. The user has no way to know which keys have been accessed by which browsers for which services. If any of the browsers are compromised, it should be assumed that all of the token’s keys have been compromised. (This problem can be mitigated, however, if the U2F device has a special display to show the user what’s being authenticated.) Moreover, since the USB stack is in the same monolithic OS, the system is vulnerable to attacks like `BadUSB <https://www.blackhat.com/us-14/briefings.html#badusb-on-accessories-that-turn-evil>`__."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:68
#: 97c7f34c754c4d1fb93031070f6527ca
msgid "In Qubes OS, by contrast, it is possible to securely compartmentalise the browser in one qube and the USB stack in another so that they are always kept separate from each other. The Qubes U2F Proxy then allows the token connected to the USB stack in one qube to communicate with the browser in a separate qube. We operate under the assumption that the USB stack is untrusted from the point of view of the browser and also that the browser is not to be trusted blindly by the token. Therefore, the token is never in the same qube as the browser. Our proxy forwards only the data necessary to actually perform the authentication, leaving all unnecessary data out, so it won’t become a vector of attack. This is depicted in the diagram below (click for full size)."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:80
#: dab704413fda48dbb75bb233104aa24b
msgid "|Qubes U2F Proxy diagram|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:82
#: 85d120e204f5408e867debcce3f051aa
msgid "The Qubes U2F Proxy has two parts: the frontend and the backend. The frontend runs in the same qube as the browser and presents a fake USB-like HID device using ``uhid``. The backend runs in ``sys-usb`` and behaves like a browser. This is done using the ``u2flib_host`` reference library. All of our code was written in Python. The standard :doc:`qrexec </developer/services/qrexec>` policy is responsible for directing calls to the appropriate domains."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:90
#: 569037e2fcd74c5f91d510d1dda2b7ef
msgid "The ``vault`` qube with a dashed line in the bottom portion of the diagram depicts future work in which we plan to implement the Qubes U2F Proxy with a software token in an isolated qube rather than a physical hardware token. This is similar to the manner in which :doc:`Split GPG </user/security-in-qubes/split-gpg>` allows us to emulate the smart card model without physical smart cards."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:97
#: 96a98300ad99426cb6895b29510c63ba
msgid "One very important assumption of U2F is that the browser verifies every request sent to the U2F token — in particular, that the web application sending an authentication request matches the application that would be authenticated by answering that request (in order to prevent, e.g., a phishing site from sending an authentication request for your bank’s site). With the WebUSB feature in Chrome, however, a malicious website can `bypass <https://www.wired.com/story/chrome-yubikey-phishing-webusb/>`__ this safeguard by connecting directly to the token instead of using the browser’s U2F API."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:108
#: 1226628398304d8b82f82400d6528427
msgid "The Qubes U2F Proxy also prevents this class of attacks by implementing an additional verification layer. This verification layer allows you to enforce, for example, that the web browser in your ``twitter`` qube can only access the U2F key associated with ``https://twitter.com``. This means that if anything in your ``twitter`` qube were compromised — the browser or even the OS itself — it would still not be able to access the U2F keys on your token for any other websites or services, like your email and bank accounts. This is another significant security advantage over monolithic systems. (For details and instructions, see the `Advanced usage <#advanced-usage-per-qube-key-access>`__ section below.)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:119
#: b9f5ef838c7c4f4893035b5aeaf0a274
msgid "For even more protection, you can combine this with the :doc:`Qubes firewall </user/security-in-qubes/firewall>` to ensure, for example, that the browser in your ``banking`` qube accesses only one website (your bank’s website). By configuring the Qubes firewall to prevent your ``banking`` qube from accessing any other websites, you reduce the risk of another website compromising the browser in an attempt to bypass U2F authentication."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:127
#: d1da37c2b48248cc9e3b2f5c629f678e
msgid "Installation"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:129
#: 6c0e425f742b40488f1b734877fdf20a
msgid "These instructions assume that there is a ``sys-usb`` qube that holds the USB stack, which is the default configuration in most Qubes OS installations."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:133
#: b163395655cf49928f096b04f1e2d2ca
msgid "In dom0:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:140
#: b7881854bf34489a8146d91f50fd3209
msgid "The above assumes a ``work`` qube in which you would like to enable u2f. Repeat the ``qvm-service`` command for all qubes that should have the proxy enabled. Alternatively, you can add ``qubes-u2f-proxy`` in VM settings -> Services in the Qube Manager of each qube you would like to enable the service."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:146
#: 6dff1b3a6bbd4b1e9a9c4c624fc5e45c
msgid "In Fedora templates:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:152
#: 3ceb4924aaae455ea2b969b50e87a292
msgid "In Debian templates:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:158
#: f5ab372704c7475ea34bd63ed0393b30
msgid "As usual with software updates, shut down the templates after installation, then restart ``sys-usb`` and all qubes that use the proxy. After that, you may use your U2F token (but see `Browser support <#template-and-browser-support>`__ below)."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:164
#: 843799c74f5b4cfd986164ede81761c3
msgid "Advanced usage: per-qube key access"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:166
#: 1551929745904f1e938e9b608e7c5725
msgid "If you are using Qubes 4.0, you can further compartmentalise your U2F keys by restricting each qube’s access to specific keys. For example, you could make it so that your ``twitter`` qube (and, therefore, all web browsers in your ``twitter`` qube) can access only the key on your U2F token for ``https://twitter.com``, regardless of whether any of the web browsers in your ``twitter`` qube or the ``twitter`` qube itself are compromised. If your ``twitter`` qube makes an authentication request for your bank website, it will be denied at the Qubes policy level."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:175
#: e45d1d6a9c0c49a2a581c256c050e74f
msgid "To enable this, create a file in dom0 named ``/etc/qubes-rpc/policy/policy.RegisterArgument+u2f.Authenticate`` with the following content:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:183
#: 2e5fcc16842b4d9cb5b6485bf75eb29a
msgid "Next, empty the contents of ``/etc/qubes-rpc/policy/u2f.Authenticate`` so that it is a blank file. Do not delete the file itself. (If you do, the default file will be recreated the next time you update, so it will no longer be empty.) Finally, follow your web application’s instructions to enroll your token and use it as usual. (This enrollment process depends on the web application and is in no way specific to Qubes U2F.)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:190
#: c655884708e94af5a1216543bdd0e724
msgid "The default model is to allow a qube to access all and only the keys that were enrolled by that qube. For example, if your ``banking`` qube enrolls your banking key, and your ``twitter`` qube enrolls your Twitter key, then your ``banking`` qube will have access to your banking key but not your Twitter key, and your ``twitter`` qube will have access to your Twitter key but not your banking key."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:198
#: 7a9d6f8615c74a4ebb14ca75cbf14209
msgid "Non-default USB qube name"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:200
#: 83a2feed08aa49f5975067fd353e4272
msgid "If your USB qube is named differently than ``sys-usb``, then do the following in the appropriate template(s):"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:208
#: ccae72f2439b4c5d9a3c0c2176209175
msgid "Replace ``USB_QUBE`` with the actual USB qube name."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:210
#: 65ad219b1247467bbbc2db9509aa51d7
msgid "Do not forget to change the sys-usb qube name in the policy ``/etc/qubes-rpc/policy/u2f.Authenticate``."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:214
#: e900756111ca48349639c544d06d1602
msgid "Template and browser support"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:216
#: c13a48995e6448ef8470b89d92d847d9
msgid "The large number of possible combinations of template (Fedora 27, 28; Debian 8, 9) and browser (multiple Google Chrome versions, multiple Chromium versions, multiple Firefox versions) made it impractical for us to test every combination that users are likely to attempt with the Qubes U2F Proxy. In some cases, you may be the first person to try a particular combination. Consequently (and as with any new feature), users will inevitably encounter bugs. We ask for your patience and understanding in this regard. As always, please :doc:`report any bugs you encounter </introduction/issue-tracking>`."
msgstr ""
