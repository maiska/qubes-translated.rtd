# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-23 17:29+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../_doc/developer/code/coding-style.rst:2
#: 7e53c49d09d34d8d8be30ee981f02f6d
msgid "Rationale"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:4
#: eb24e01edacd473cbf7c13153e39a524
msgid "Maintaining proper coding style is very important for any large software project, such as Qubes. Here’s why:"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:7
#: 7b4ed2fa34fe497e8647b068d0c9f010
msgid "It eases maintenance tasks, such as adding new functionality or generalizing code later,"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:9
#: 42f7d2f0139d40e69026985ec96610d8
msgid "It allows others (as well as the future you!) to easily understand fragments of code and what they were supposed to do, and thus makes it easier to later extend them with newer functionality or bug fixes,"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:12
#: 0f00363abb6b4ea8a195e1b17107e902
msgid "It allows others to easily review the code and catch various bugs,"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:13
#: 28dd28caecbc483babf57ac118e13828
msgid "It provides for an aesthetically pleasing experience when one reads the code…"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:16
#: 26dcae5ca1804a2cbe8d28d7ba7d94ef
msgid "Often, developers, usually smart ones, undersell the value of proper coding style, thinking that it’s much more important how their code works. These developers expect that if their code solves some problem using a nice and neat trick, then that’s all that is really required. Such thinking shows, however, immaturity and is a signal that the developer, no matter how bright and smart, might not be a good fit for larger projects. Writing a clever exploit for a Black Hat show is one thing - writing useful software supposed to be used and maintained for years is quite a different story. If you want to show off what a smart programmer you are, then you should become a researcher and write exploits. If, on the other hand, you want to be part of a team that makes real, useful software, you should ensure your coding style is impeccable. At Qubes project, we often took shortcuts and wrote nasty code, and this has always back fired at us, sometime months, sometime years later, the net result being we had to spend time fixing code, rather than implementing new functionality."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:33
#: 1e4e3935fb794d0a960c6e2073b29574
msgid "And here’s a `link to the real case <https://groups.google.com/forum/#!msg/qubes-devel/XgTo6L8-5XA/JLOadvBqnqMJ>`__ (one Qubes Security Bulletin) demonstrating how the lackadaisical coding style lead to a real security bug. Never assume you’re smart enough to disregard clean and rigorous coding!"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:40
#: 44fdf44190834963a996cad128229d7c
msgid "General typographic conventions"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:42
#: b63de5a932f84ec3954fef215a1c59ae
msgid "**Use space-expanded tabs that equal 4 spaces.** Yes, we know, there are many arguments for using “real” tabs instead of space-expanded tabs, but we need to pick one convention to make the project consistent. One argument for using space-expanded tabs is that this way the programmer is in control of how the code will look like, despite how other users have configured their editors to visualize the tabs (of course, we assume any sane person uses a fixed-width font for viewing the source code). If it makes you feel any better, assume this is just an arbitrary choice made to enforce a unified style."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:53
#: c84c19baa6aa4ea48fd1f7dcf18a9099
msgid "**Maintain max. line length of 80 characters**. Even though today’s monitors often are very wide and it’s often not a problem to have 120 characters displayed in an editor, maintaining shorter line lengths improves readability. It also allows others to have two parallel windows open, side by side, each with different parts of the source code."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:60
#: 4174fbe548b940c49edc75ea431f2f74
msgid "**Naming conventions for any OS other than Windows**:"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:62
#: 8e3ce03fd7eb4ba79d44fa7c4d7f2051
msgid "``ClassName``"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:63
#: 9cb27c29cb414fa3b9639e1fe856532b
msgid "``some_variable``, ``some_function``, ``some_argument``"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:65
#: 11611c2e44644a6c9aebf33d472cc903
msgid "**Naming convention for Windows OS** – exceptionally to preserve Windows conventions please use the following:"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:68
#: 1fe61f9773344127aa21149fefb72ec4
msgid "``ClassName``, ``FunctionName``"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:69
#: 344a83beb5c2455aa19df7758e928593
msgid "``pszArgumentOne``, ``hPipe`` – use Hungarian notation for argument and variables"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:72
#: 02b76f8937f84fa58e76a14519632d21
msgid "**Maintain a decent amount of horizontal spacing**, e.g. add a space after ``if`` or before ``{`` in C, and similar in other languages. Whether and where to also use spaces within expressions, such as (x*2+5) vs. (x \\* 2 + 5) is left to the developer’s judgment. Do not put spaces immediately after or before the brackets in expressions, so avoid constructs like this: ``if ( condition )`` and use ones like this: ``if (condition)`` instead."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:80
#: 8023a4172cd24dcf9c826a1336275970
msgid "**Use single new lines** (‘\\\\n’ aka LF) in any non-Windows source code. On Windows, exceptionally, use the CRLF line endings (–). This will allow the source code to be easily viewable in various Windows-based programs."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:85
#: f68738296a7e4173bba44ebe126cc801
msgid "**Use descriptive names for variables and functions**! Really, at a time when most editors have auto-completion features, there is no excuse for using short variable names."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:89
#: c4eb4b8f72224186bf33f80afca97005
msgid "**Comments should be indented together with the code**, e.g. like this:"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:102
#: 3ef9ec37aa5b4464a4a52ee708b4b231
msgid "File naming conventions"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:104
#: b3143979fdd14965bbfca7c389052e64
msgid "All file names written with small letters, use dash to separate words, rather than underscores, e.g. ``qubes-dom0-update``. Never use spaces!"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:108
#: 872c4878e67743ca89fa0a247980d359
msgid "**File naming in Linux/Unix-like systems:**"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:110
#: 60d2bc3fedab46be8a4b487f19d7f09d
msgid "User commands that operate on particular VMs (also those accessible in VMs): ``/usr/bin/qvm-*``"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:112
#: a701758199474b7897396a7150f9f0d9
msgid "User commands that apply to the whole system (Dom0 only): ``/usr/bin/qubes-*``"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:114
#: 46df131e86494cdab9bdaf3b04d81327
msgid "Auxiliary executables and scripts in ``/usr/libexec/qubes/`` (Note: previously we used ``/usr/lib/qubes`` but decided to change that)"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:116
#: 5f271c59857947f9a8cef96c7a6b4f4d
msgid "Helper, non-executable files in ``/usr/share/qubes/``"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:117
#: 8acaa2ac3d5449b49e3e1b2976a11287
msgid "Various config files in ``/etc/qubes``"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:118
#: 0385cb5661944fb1b578d0bca2516a99
msgid "Qubes RPC services in ``/etc/qubes-rpc``. Qubes RPC Policy definitions (only in Dom0) in ``/etc/qubes-rpc/policy/``"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:120
#: 6e3c4833aa6c418e9237bd3129ffc1ad
msgid "All VM-related configs, images, and other files in ``/var/lib/qubes/``"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:122
#: b98f7dfe50694b0db525c9bc70cc9abb
msgid "System-wide temporary files which reflect the current state of system in ``/var/run/qubes``"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:124
#: 5c900a4a0ca04a898935bee1c5b42cd6
msgid "Logs: either log to the system-wide messages, or to ``/var/log/qubes/``"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:127
#: f6af083f5b114934897fa17d40fcb419
msgid "**File naming in Windows systems:**"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:129
#: a4391908dfac46b3bb7b616806500410
msgid "All base qubes-related files in ``C:\\Program Files\\Invisible Things Lab\\Qubes\\`` (Exceptionally spaces are allowed here to adhere to Windows naming conventions)"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:132
#: dc03de03ff704028b8e0afa9460f6701
msgid "Other, third-party files, not Qubes-specific, such as e.g. Xen PV drivers might be in different vendor subdirs, e.g. ``C:\\Program Files\\Xen PV Drivers``"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:137
#: d261562a78314504900357d299cc15df
msgid "General programming style guidelines"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:139
#: 18f598a8c10f4da08e833c90d179e32a
msgid "Do not try to impress with your coding kung-fu, do not use tricks to save 2 lines of code, always prefer readability over trickiness!"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:142
#: a44715cd87c5422c87c80c76e1d8f30a
msgid "Make sure your code compiles and builds without warnings."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:144
#: 3e6f1eff6b9a4736810f838a8914b718
msgid "Always think first about interfaces (e.g. function arguments, or class methods) and data structures before you start writing the actual code."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:148
#: d221b7522034447a953334c9f7efb8a5
msgid "Use comments to explain non-trivial code fragments, or expected behavior of more complex functions, if it is not clear from their name."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:152
#: 1b84e0d1f4fd47a38d42260cb45d2dd6
msgid "Do **not** use comments for code fragments where it is immediately clear what the code does. E.g. avoid constructs like this:"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:163
#: a82276e9dd2e42168c9d560348aff8b7
msgid "Do **not** use comments to disable code fragments. In production code there should really be no commented or disabled code fragments. If you really, really have a good reason to retain some fragment of unused code, use #if or #ifdef to disable it, e.g.:"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:174
#: a6f9c503f46143038dced1ce9d53f832
msgid "… and preferably use some descriptive macro instead of just ``0``, e.g.:"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:183
#: 08515e6994d84daca56909782116228d
msgid "Not sure how to do similar thing in Python… Anyone?"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:187
#: d8e5e017d5554410b7d9b648d05a9b00
msgid "But generally, there is little excuse to keep old, unused code fragments in the code. One should really use the functionality provided by the source code management system, such as git, instead. E.g. create a special branch for storing the old, unused code – this way you will always be able to merge this code into upstream in the future."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:194
#: 88da424b8efa44f49a88f7b6a18104f1
msgid "Do not hardcode values in the code! The only three numbers that are an exception here and for which it is acceptable to hardcode them are: ``0``, ``1`` and ``-1``, and frankly the last two are still controversial…"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:200
#: b7f2f95da34843f584076f36c4362061
msgid "Source Code management (Git) guidelines"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:202
#: ba1d0fcbb8bd41f79623684eaf2733f6
msgid "Use git to maintain all code for Qubes project."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:204
#: 7b6e13b128854d2eb6b8f581ea4fda29
msgid "Before you start using git, make sure you understand that git is a decentralized Source Code Management system, and that it doesn’t behave like traditional, centralized source code management systems, such as SVN. Here’s a good `introductory book on git <http://git-scm.com/book>`__. Read it."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:210
#: 6b632fcdea8f4017a4c1ecd29cee39a0
msgid "Qubes code is divided into many git repositories. There are several reasons for that:"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:213
#: a8fba3356c364eeebed94a1749e8b77f
msgid "This creates natural boundaries between different code blocks, enforcing proper interfaces, and easing independent development to be conducted on various code parts at the same time, without the fear of running into conflicts."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:217
#: 6a669481b21f44b781d31a1d99d250fb
msgid "By maintaining relatively small git repositories, it is easy for new developers to understand the code and contribute new patches, without the need to understand all the other code."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:220
#: 076c4d4a5ae84d9591c94b8a53349386
msgid "Code repositories represent also licensing boundaries. So, e.g. because ``core-agent-linux`` and ``core-agent-windows`` are maintained in two different repositories, it is possible to have the latter under a proprietary, non-GPL license, while keeping the former fully open source."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:225
#: 7e59673eaa574304ae37a9bf9d3bacc8
msgid "We have drastically changed the layout and naming of the code repositories shortly after Qubes OS R2 Beta 2 release. For details on the current code layout, please read `this article <https://blog.invisiblethings.org/2013/03/21/introducing-qubes-odyssey-framework.html>`__."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:231
#: 88cb0234e80a42b1935520b33b923e64
msgid "Commit message guidelines"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:233
#: c043fdf9dab847ad9eefd463a41401f0
msgid "Please attempt to follow these conventions when writing your Git commit messages:"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:236
#: 9b1802b6e10a486795b0f04e76e1fa0d
msgid "Separate the subject line from the body with a blank line."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:237
#: 60bb0c35dbbb489198f2528547d75f2f
msgid "Limit the subject line to approximately 50 characters."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:238
#: 6ae02e388a0c40ab936741c766ae4cba
msgid "Capitalize the subject line."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:239
#: 1fa08d1b21ec434e822204fb849eb302
msgid "Do not end the subject line with a period."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:240
#: 64538370ce864239b3c7b565b2ed9bc5
msgid "Use the imperative mood in the subject line."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:241
#: b2b81396722a4ab2820c928bac6c8f91
msgid "Wrap the body at 72 characters."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:242
#: ed0dae85cbf74615b6c04c14434e04f4
msgid "Use the body to explain *what* and *why* rather than *how*."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:244
#: 13fcf9247a5440f896dbff3fb7c85709
msgid "For details, examples, and the rationale behind each of these conventions, please see `this blog post <https://chris.beams.io/posts/git-commit/>`__, which is the source of this list."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:250
#: 799557018f1646df889e5070dbf5e8df
msgid "Security coding guidelines"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:252
#: 8ec6c2d7993a4b17a128d271fe627fcb
msgid "As a general rule: **untrusted input** is our #1 enemy!"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:254
#: c452d068e45a4989afdf8abe58f7427b
msgid "Any input that comes from untrusted, or less trusted, or just differently-trusted, entity should always be considered as malicious and should always be sanitized and verified. So, if your software runs in Dom0 and processes some input from any of the VMs, this input should be considered to be malicious. Even if your software runs in a VM, and processes input from some other VM, you should also assume that the input is malicious and verify it."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:262
#: ddec9a5a8b134cb6bac117ea6e7b469c
msgid "Use ``untrusted_`` prefix for all variables that hold values read from untrusted party and which have not yet been verified to be decent, e.g.:"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:277
#: f9aa5500eb954458a1ed5492ed4457e7
msgid "Use others variables, without the ``untrusted_`` prefix to hold the sanitized values, as shown above."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:281
#: 20f26104574443c5a1b50326490b186c
msgid "Python-specific guidelines"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:283
#: e45368c15f2041a5914786181fb580a4
msgid "Please follow the guidelines `here <http://www.python.org/dev/peps/pep-0008/>`__, unless they were in conflict with what is written on this page."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:288
#: 64d65b7ae06348ba96a6ff6891372daa
msgid "C and C++ specific guidelines"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:290
#: c14b4caa9f174978a40f4b8575c72919
msgid "Do not place code in ``*.h`` files."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:291
#: 11df3a0dd1364fb489dc276bf2e178c5
msgid "Use ``const`` whenever possible, e.g. in function arguments passed via pointers."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:293
#: ba4afa6d3cff42f6963944f2d7928772
msgid "Do not mix procedural and objective code together – if you write in C++, use classes and objects."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:295
#: c05bb52553224b90b4a849985573b8f5
msgid "Think about classes hierarchy, before starting to implement specific methods."
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:299
#: acc31c0b58b94a318b6cbe3bf7bdf8bf
msgid "Bash-specific guidelines"
msgstr ""

#: ../../../_doc/developer/code/coding-style.rst:301
#: 578cf167efdf4dc2b54667de48aa53b7
msgid "Avoid writing scripts in bash whenever possible. Use python instead. Bash-scripts are Unix-specific and will not work under Windows VMs, or in Windows admin domain, or Windows gui domain."
msgstr ""
