# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-23 17:29+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../_doc/developer/services/disposablevm-implementation.rst:1
#: b24605969f21473abd53d39ee60bd094
msgid "**Note: The content below applies to Qubes R3.2.**"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:4
#: 08d48adcf4834b72926aeb398a95f384
msgid "DisposableVM image preparation"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:6
#: 58aca8f40d634e36986ae3d28d2da7db
msgid "DisposableVM is not started like other VMs, by executing equivalent of ``xl create`` - it would be too slow. Instead, DisposableVM are started by restore from a savefile."
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:10
#: 7a25e7fd8bd04295b5daec3e647d9041
msgid "Preparing a savefile is done by ``/usr/lib/qubes/qubes_prepare_saved_domain.sh`` script. It takes two mandatory arguments, appvm name (APPVM) and the savefile name, and optional path to “prerun” script. The script executes the following steps:"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:16
#: 13ccba66193c415ca00eefe7fbe94c22
msgid "APPVM is started by ``qvm-start``"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:17
#: 6442114933e64db0bdc12bcd57d64b33
msgid "xenstore key ``/local/domain/appvm_domain_id/qubes_save_request`` is created"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:19
#: e79ffacd20fa41d0a7854ed48b84749a
msgid "if prerun script was specified, copy it to ``qubes_save_script`` xenstore key"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:21
#: a93f4759fc5e4d0ab2b3b109bfcc2aa0
msgid "wait for the ``qubes_used_mem`` key to appear"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:22
#: 5a57c2f988744590ba7f9eb9c3ac384b
msgid "(in APPVM) APPVM boots normally, up to the point in ``/etc/init.d/qubes_core`` script when the presence of ``qubes_save_request`` key is tested. If it exists, then"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:26
#: 0d7dba3e26fe4a5e8daf7ccc0335824c
msgid "(in APPVM) if exists, prerun script is retrieved from the respective xenstore key and executed. This preloads filesystem cache with useful applications, so that they will start faster."
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:29
#: 3d587b697e7a4c098585a3863ba5847c
msgid "(in APPVM) the amount of used memory is stored to ``qubes_used_mem`` xenstore key"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:31
#: 55b8af0eeba04af39d8a9a062c5e7843
msgid "(in APPVM) busy-waiting for ``qubes_restore_complete`` xenstore key to appear"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:34
#: ec3f5c0f28594231a46cb0fb3cfca96a
msgid "when ``qubes_used_mem`` key appears, the domain memory is reduced to this amount, to make the savefile smaller."
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:36
#: 50bc621ef96a4fd0b1ac107f510a54a3
msgid "APPVM private image is detached"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:37
#: ef087a55eb4f4e89ba340a929985da69
msgid "the domain is saved via ``xl save``"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:38
#: 69310170b18d45108446ebb3644a390c
msgid "the COW file volatile.img (cow for root fs and swap) is packed to ``saved_cows.tar`` archive"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:41
#: cd3116e59cad46e9a7c18d994f44535d
msgid "The ``qubes_prepare_saved_domain.sh`` script is lowlevel. It is usually called by ``qvm-create-default-dvm`` script, that takes care of creating a special AppVM (named template_name-dvm) to be passed to ``qubes_prepare_saved_domain.sh``, as well as copying the savefile to /dev/shm (the latter action is not done if the ``/var/lib/qubes/dvmdata/dont_use_shm`` file exists)."
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:49
#: d2ca0c12467846c3be8ec5aad0f4a5aa
msgid "Restoring a DisposableVM from the savefile"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:51
#: 4835bd5a7a1c491ab4ac3cc096df15ea
msgid "Normally, disposable VM is created when qubes rpc request with target *$dispvm* is received. Then, as a part of rpc connection setup, the ``qfile-daemon-dvm`` program is executed; it executes ``/usr/lib/qubes/qubes_restore`` program. It is crucial that this program executes quickly, to make DisposableVM creation overhead bearable for the user. Its main steps are:"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:58
#: a4af418488614a129ba51bfc2acc8d3b
msgid "modify the savefile so that the VM name, VM UUID, MAC address and IP address are unique"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:60
#: c9d457581073455baceddbbec9ae7ccc
msgid "restore the COW files from the ``saved_cows.tar``"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:61
#: 5dbfc0e23c1a4b558ec8064af7e4039a
msgid "create the ``/var/run/qubes/fast_block_attach`` file, whose presence tells the ``/etc/xen/scripts/block`` script to bypass some redundant checks and execute as fast as possible."
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:64
#: c32173eb815f473ca6ef80189e30f167
msgid "execute ``xl restore`` in order to restore a domain."
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:65
#: 2817f9018f16491f989d979b3f035514
msgid "create the same xenstore keys as normally created when AppVM boots (e.g. ``qubes_ip``)"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:67
#: 67ca6f944fcb4fa697584da36f7255f1
msgid "create the ``qubes_restore_complete`` xenstore key. This allows the boot process in DisposableVM to continue."
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:70
#: 08e82a6af7314938936793fed26fb57b
msgid "The actual passing of files between AppVM and a DisposableVM is implemented via qubes rpc."
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:74
#: e5a9fb2b46734740b3b808ee0aacba58
msgid "Validating the DisposableVM savefile"
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:76
#: 815669c516e94b9f84389f4afb49a42c
msgid "DisposableVM savefile contains references to template rootfs and to COW files. The COW files are restored before each DisposableVM start, so they cannot change. On the other hand, if templateVM is started, the template rootfs will change, and it may not be coherent with the COW files."
msgstr ""

#: ../../../_doc/developer/services/disposablevm-implementation.rst:82
#: 9b732008f72e49f6a4ccddc456b3d08a
msgid "Therefore, the check for template rootfs modification time being older than DisposableVM savefile modification time is required. It is done in ``qfilexchgd`` daemon, just before restoring DisposableVM. If necessary, an attempt is made to recreate the DisposableVM savefile, using the last template used (or default template, if run for the first time) and the default prerun script, residing at ``/var/lib/qubes/vm-templates/templatename/dispvm_prerun.sh``. Unfortunately, the prerun script takes a lot of time to execute - therefore, after template rootfs modification, the next DisposableVM creation can be longer by about 2.5 minutes."
msgstr ""
